// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/0xfzz/tuwitt/ent/blockedusersrelationship"
	"github.com/0xfzz/tuwitt/ent/useraccount"
)

// BlockedUsersRelationship is the model entity for the BlockedUsersRelationship schema.
type BlockedUsersRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// BlockerID holds the value of the "blocker_id" field.
	BlockerID int `json:"blocker_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockedUsersRelationshipQuery when eager-loading is set.
	Edges        BlockedUsersRelationshipEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BlockedUsersRelationshipEdges holds the relations/edges for other nodes in the graph.
type BlockedUsersRelationshipEdges struct {
	// Blocker holds the value of the blocker edge.
	Blocker *UserAccount `json:"blocker,omitempty"`
	// BlockedUser holds the value of the blocked_user edge.
	BlockedUser *UserAccount `json:"blocked_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BlockerOrErr returns the Blocker value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockedUsersRelationshipEdges) BlockerOrErr() (*UserAccount, error) {
	if e.loadedTypes[0] {
		if e.Blocker == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: useraccount.Label}
		}
		return e.Blocker, nil
	}
	return nil, &NotLoadedError{edge: "blocker"}
}

// BlockedUserOrErr returns the BlockedUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockedUsersRelationshipEdges) BlockedUserOrErr() (*UserAccount, error) {
	if e.loadedTypes[1] {
		if e.BlockedUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: useraccount.Label}
		}
		return e.BlockedUser, nil
	}
	return nil, &NotLoadedError{edge: "blocked_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockedUsersRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blockedusersrelationship.FieldID, blockedusersrelationship.FieldUserID, blockedusersrelationship.FieldBlockerID:
			values[i] = new(sql.NullInt64)
		case blockedusersrelationship.FieldCreatedAt, blockedusersrelationship.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockedUsersRelationship fields.
func (bur *BlockedUsersRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blockedusersrelationship.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bur.ID = int(value.Int64)
		case blockedusersrelationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bur.CreatedAt = value.Time
			}
		case blockedusersrelationship.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bur.UpdatedAt = value.Time
			}
		case blockedusersrelationship.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				bur.UserID = int(value.Int64)
			}
		case blockedusersrelationship.FieldBlockerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field blocker_id", values[i])
			} else if value.Valid {
				bur.BlockerID = int(value.Int64)
			}
		default:
			bur.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlockedUsersRelationship.
// This includes values selected through modifiers, order, etc.
func (bur *BlockedUsersRelationship) Value(name string) (ent.Value, error) {
	return bur.selectValues.Get(name)
}

// QueryBlocker queries the "blocker" edge of the BlockedUsersRelationship entity.
func (bur *BlockedUsersRelationship) QueryBlocker() *UserAccountQuery {
	return NewBlockedUsersRelationshipClient(bur.config).QueryBlocker(bur)
}

// QueryBlockedUser queries the "blocked_user" edge of the BlockedUsersRelationship entity.
func (bur *BlockedUsersRelationship) QueryBlockedUser() *UserAccountQuery {
	return NewBlockedUsersRelationshipClient(bur.config).QueryBlockedUser(bur)
}

// Update returns a builder for updating this BlockedUsersRelationship.
// Note that you need to call BlockedUsersRelationship.Unwrap() before calling this method if this BlockedUsersRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (bur *BlockedUsersRelationship) Update() *BlockedUsersRelationshipUpdateOne {
	return NewBlockedUsersRelationshipClient(bur.config).UpdateOne(bur)
}

// Unwrap unwraps the BlockedUsersRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bur *BlockedUsersRelationship) Unwrap() *BlockedUsersRelationship {
	_tx, ok := bur.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockedUsersRelationship is not a transactional entity")
	}
	bur.config.driver = _tx.drv
	return bur
}

// String implements the fmt.Stringer.
func (bur *BlockedUsersRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("BlockedUsersRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bur.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bur.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bur.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", bur.UserID))
	builder.WriteString(", ")
	builder.WriteString("blocker_id=")
	builder.WriteString(fmt.Sprintf("%v", bur.BlockerID))
	builder.WriteByte(')')
	return builder.String()
}

// BlockedUsersRelationships is a parsable slice of BlockedUsersRelationship.
type BlockedUsersRelationships []*BlockedUsersRelationship
