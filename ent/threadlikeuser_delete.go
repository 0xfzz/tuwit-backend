// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwitt/ent/predicate"
	"github.com/0xfzz/tuwitt/ent/threadlikeuser"
)

// ThreadLikeUserDelete is the builder for deleting a ThreadLikeUser entity.
type ThreadLikeUserDelete struct {
	config
	hooks    []Hook
	mutation *ThreadLikeUserMutation
}

// Where appends a list predicates to the ThreadLikeUserDelete builder.
func (tlud *ThreadLikeUserDelete) Where(ps ...predicate.ThreadLikeUser) *ThreadLikeUserDelete {
	tlud.mutation.Where(ps...)
	return tlud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tlud *ThreadLikeUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tlud.sqlExec, tlud.mutation, tlud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tlud *ThreadLikeUserDelete) ExecX(ctx context.Context) int {
	n, err := tlud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tlud *ThreadLikeUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(threadlikeuser.Table, sqlgraph.NewFieldSpec(threadlikeuser.FieldID, field.TypeInt))
	if ps := tlud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tlud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tlud.mutation.done = true
	return affected, err
}

// ThreadLikeUserDeleteOne is the builder for deleting a single ThreadLikeUser entity.
type ThreadLikeUserDeleteOne struct {
	tlud *ThreadLikeUserDelete
}

// Where appends a list predicates to the ThreadLikeUserDelete builder.
func (tludo *ThreadLikeUserDeleteOne) Where(ps ...predicate.ThreadLikeUser) *ThreadLikeUserDeleteOne {
	tludo.tlud.mutation.Where(ps...)
	return tludo
}

// Exec executes the deletion query.
func (tludo *ThreadLikeUserDeleteOne) Exec(ctx context.Context) error {
	n, err := tludo.tlud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{threadlikeuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tludo *ThreadLikeUserDeleteOne) ExecX(ctx context.Context) {
	if err := tludo.Exec(ctx); err != nil {
		panic(err)
	}
}
