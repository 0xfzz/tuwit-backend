// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwit-backend/ent/threadlikeuser"
)

// ThreadLikeUserCreate is the builder for creating a ThreadLikeUser entity.
type ThreadLikeUserCreate struct {
	config
	mutation *ThreadLikeUserMutation
	hooks    []Hook
}

// Mutation returns the ThreadLikeUserMutation object of the builder.
func (tluc *ThreadLikeUserCreate) Mutation() *ThreadLikeUserMutation {
	return tluc.mutation
}

// Save creates the ThreadLikeUser in the database.
func (tluc *ThreadLikeUserCreate) Save(ctx context.Context) (*ThreadLikeUser, error) {
	return withHooks(ctx, tluc.sqlSave, tluc.mutation, tluc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tluc *ThreadLikeUserCreate) SaveX(ctx context.Context) *ThreadLikeUser {
	v, err := tluc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tluc *ThreadLikeUserCreate) Exec(ctx context.Context) error {
	_, err := tluc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluc *ThreadLikeUserCreate) ExecX(ctx context.Context) {
	if err := tluc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tluc *ThreadLikeUserCreate) check() error {
	return nil
}

func (tluc *ThreadLikeUserCreate) sqlSave(ctx context.Context) (*ThreadLikeUser, error) {
	if err := tluc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tluc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tluc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tluc.mutation.id = &_node.ID
	tluc.mutation.done = true
	return _node, nil
}

func (tluc *ThreadLikeUserCreate) createSpec() (*ThreadLikeUser, *sqlgraph.CreateSpec) {
	var (
		_node = &ThreadLikeUser{config: tluc.config}
		_spec = sqlgraph.NewCreateSpec(threadlikeuser.Table, sqlgraph.NewFieldSpec(threadlikeuser.FieldID, field.TypeInt))
	)
	return _node, _spec
}

// ThreadLikeUserCreateBulk is the builder for creating many ThreadLikeUser entities in bulk.
type ThreadLikeUserCreateBulk struct {
	config
	err      error
	builders []*ThreadLikeUserCreate
}

// Save creates the ThreadLikeUser entities in the database.
func (tlucb *ThreadLikeUserCreateBulk) Save(ctx context.Context) ([]*ThreadLikeUser, error) {
	if tlucb.err != nil {
		return nil, tlucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tlucb.builders))
	nodes := make([]*ThreadLikeUser, len(tlucb.builders))
	mutators := make([]Mutator, len(tlucb.builders))
	for i := range tlucb.builders {
		func(i int, root context.Context) {
			builder := tlucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ThreadLikeUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlucb *ThreadLikeUserCreateBulk) SaveX(ctx context.Context) []*ThreadLikeUser {
	v, err := tlucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlucb *ThreadLikeUserCreateBulk) Exec(ctx context.Context) error {
	_, err := tlucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlucb *ThreadLikeUserCreateBulk) ExecX(ctx context.Context) {
	if err := tlucb.Exec(ctx); err != nil {
		panic(err)
	}
}
