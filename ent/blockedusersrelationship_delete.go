// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwitt/ent/blockedusersrelationship"
	"github.com/0xfzz/tuwitt/ent/predicate"
)

// BlockedUsersRelationshipDelete is the builder for deleting a BlockedUsersRelationship entity.
type BlockedUsersRelationshipDelete struct {
	config
	hooks    []Hook
	mutation *BlockedUsersRelationshipMutation
}

// Where appends a list predicates to the BlockedUsersRelationshipDelete builder.
func (burd *BlockedUsersRelationshipDelete) Where(ps ...predicate.BlockedUsersRelationship) *BlockedUsersRelationshipDelete {
	burd.mutation.Where(ps...)
	return burd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (burd *BlockedUsersRelationshipDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, burd.sqlExec, burd.mutation, burd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (burd *BlockedUsersRelationshipDelete) ExecX(ctx context.Context) int {
	n, err := burd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (burd *BlockedUsersRelationshipDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(blockedusersrelationship.Table, sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt))
	if ps := burd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, burd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	burd.mutation.done = true
	return affected, err
}

// BlockedUsersRelationshipDeleteOne is the builder for deleting a single BlockedUsersRelationship entity.
type BlockedUsersRelationshipDeleteOne struct {
	burd *BlockedUsersRelationshipDelete
}

// Where appends a list predicates to the BlockedUsersRelationshipDelete builder.
func (burdo *BlockedUsersRelationshipDeleteOne) Where(ps ...predicate.BlockedUsersRelationship) *BlockedUsersRelationshipDeleteOne {
	burdo.burd.mutation.Where(ps...)
	return burdo
}

// Exec executes the deletion query.
func (burdo *BlockedUsersRelationshipDeleteOne) Exec(ctx context.Context) error {
	n, err := burdo.burd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{blockedusersrelationship.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (burdo *BlockedUsersRelationshipDeleteOne) ExecX(ctx context.Context) {
	if err := burdo.Exec(ctx); err != nil {
		panic(err)
	}
}
