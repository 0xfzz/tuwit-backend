// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/0xfzz/tuwitt/ent/useraccount"
	"github.com/0xfzz/tuwitt/ent/usercount"
)

// UserCount is the model entity for the UserCount schema.
type UserCount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FollowerCount holds the value of the "follower_count" field.
	FollowerCount int `json:"follower_count,omitempty"`
	// FollowingsCount holds the value of the "followings_count" field.
	FollowingsCount int `json:"followings_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserCountQuery when eager-loading is set.
	Edges                   UserCountEdges `json:"edges"`
	user_account_user_count *int
	selectValues            sql.SelectValues
}

// UserCountEdges holds the relations/edges for other nodes in the graph.
type UserCountEdges struct {
	// User holds the value of the user edge.
	User *UserAccount `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCountEdges) UserOrErr() (*UserAccount, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: useraccount.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserCount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usercount.FieldID, usercount.FieldFollowerCount, usercount.FieldFollowingsCount:
			values[i] = new(sql.NullInt64)
		case usercount.ForeignKeys[0]: // user_account_user_count
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserCount fields.
func (uc *UserCount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usercount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uc.ID = int(value.Int64)
		case usercount.FieldFollowerCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field follower_count", values[i])
			} else if value.Valid {
				uc.FollowerCount = int(value.Int64)
			}
		case usercount.FieldFollowingsCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field followings_count", values[i])
			} else if value.Valid {
				uc.FollowingsCount = int(value.Int64)
			}
		case usercount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_account_user_count", value)
			} else if value.Valid {
				uc.user_account_user_count = new(int)
				*uc.user_account_user_count = int(value.Int64)
			}
		default:
			uc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserCount.
// This includes values selected through modifiers, order, etc.
func (uc *UserCount) Value(name string) (ent.Value, error) {
	return uc.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserCount entity.
func (uc *UserCount) QueryUser() *UserAccountQuery {
	return NewUserCountClient(uc.config).QueryUser(uc)
}

// Update returns a builder for updating this UserCount.
// Note that you need to call UserCount.Unwrap() before calling this method if this UserCount
// was returned from a transaction, and the transaction was committed or rolled back.
func (uc *UserCount) Update() *UserCountUpdateOne {
	return NewUserCountClient(uc.config).UpdateOne(uc)
}

// Unwrap unwraps the UserCount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uc *UserCount) Unwrap() *UserCount {
	_tx, ok := uc.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserCount is not a transactional entity")
	}
	uc.config.driver = _tx.drv
	return uc
}

// String implements the fmt.Stringer.
func (uc *UserCount) String() string {
	var builder strings.Builder
	builder.WriteString("UserCount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uc.ID))
	builder.WriteString("follower_count=")
	builder.WriteString(fmt.Sprintf("%v", uc.FollowerCount))
	builder.WriteString(", ")
	builder.WriteString("followings_count=")
	builder.WriteString(fmt.Sprintf("%v", uc.FollowingsCount))
	builder.WriteByte(')')
	return builder.String()
}

// UserCounts is a parsable slice of UserCount.
type UserCounts []*UserCount
