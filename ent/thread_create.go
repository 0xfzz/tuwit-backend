// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwitt/ent/media"
	"github.com/0xfzz/tuwitt/ent/thread"
)

// ThreadCreate is the builder for creating a Thread entity.
type ThreadCreate struct {
	config
	mutation *ThreadMutation
	hooks    []Hook
}

// SetContent sets the "content" field.
func (tc *ThreadCreate) SetContent(s string) *ThreadCreate {
	tc.mutation.SetContent(s)
	return tc
}

// SetIsCommentDisabled sets the "is_comment_disabled" field.
func (tc *ThreadCreate) SetIsCommentDisabled(b bool) *ThreadCreate {
	tc.mutation.SetIsCommentDisabled(b)
	return tc
}

// SetNillableIsCommentDisabled sets the "is_comment_disabled" field if the given value is not nil.
func (tc *ThreadCreate) SetNillableIsCommentDisabled(b *bool) *ThreadCreate {
	if b != nil {
		tc.SetIsCommentDisabled(*b)
	}
	return tc
}

// SetVisibility sets the "visibility" field.
func (tc *ThreadCreate) SetVisibility(t thread.Visibility) *ThreadCreate {
	tc.mutation.SetVisibility(t)
	return tc
}

// SetStatus sets the "status" field.
func (tc *ThreadCreate) SetStatus(t thread.Status) *ThreadCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetIsDeleted sets the "is_deleted" field.
func (tc *ThreadCreate) SetIsDeleted(b bool) *ThreadCreate {
	tc.mutation.SetIsDeleted(b)
	return tc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (tc *ThreadCreate) SetNillableIsDeleted(b *bool) *ThreadCreate {
	if b != nil {
		tc.SetIsDeleted(*b)
	}
	return tc
}

// SetParentThreadID sets the "parent_thread" edge to the Thread entity by ID.
func (tc *ThreadCreate) SetParentThreadID(id int) *ThreadCreate {
	tc.mutation.SetParentThreadID(id)
	return tc
}

// SetNillableParentThreadID sets the "parent_thread" edge to the Thread entity by ID if the given value is not nil.
func (tc *ThreadCreate) SetNillableParentThreadID(id *int) *ThreadCreate {
	if id != nil {
		tc = tc.SetParentThreadID(*id)
	}
	return tc
}

// SetParentThread sets the "parent_thread" edge to the Thread entity.
func (tc *ThreadCreate) SetParentThread(t *Thread) *ThreadCreate {
	return tc.SetParentThreadID(t.ID)
}

// AddChildThreadIDs adds the "child_threads" edge to the Thread entity by IDs.
func (tc *ThreadCreate) AddChildThreadIDs(ids ...int) *ThreadCreate {
	tc.mutation.AddChildThreadIDs(ids...)
	return tc
}

// AddChildThreads adds the "child_threads" edges to the Thread entity.
func (tc *ThreadCreate) AddChildThreads(t ...*Thread) *ThreadCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddChildThreadIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Media entity by IDs.
func (tc *ThreadCreate) AddImageIDs(ids ...int) *ThreadCreate {
	tc.mutation.AddImageIDs(ids...)
	return tc
}

// AddImages adds the "images" edges to the Media entity.
func (tc *ThreadCreate) AddImages(m ...*Media) *ThreadCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tc.AddImageIDs(ids...)
}

// Mutation returns the ThreadMutation object of the builder.
func (tc *ThreadCreate) Mutation() *ThreadMutation {
	return tc.mutation
}

// Save creates the Thread in the database.
func (tc *ThreadCreate) Save(ctx context.Context) (*Thread, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *ThreadCreate) SaveX(ctx context.Context) *Thread {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *ThreadCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *ThreadCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *ThreadCreate) defaults() {
	if _, ok := tc.mutation.IsCommentDisabled(); !ok {
		v := thread.DefaultIsCommentDisabled
		tc.mutation.SetIsCommentDisabled(v)
	}
	if _, ok := tc.mutation.IsDeleted(); !ok {
		v := thread.DefaultIsDeleted
		tc.mutation.SetIsDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *ThreadCreate) check() error {
	if _, ok := tc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Thread.content"`)}
	}
	if _, ok := tc.mutation.IsCommentDisabled(); !ok {
		return &ValidationError{Name: "is_comment_disabled", err: errors.New(`ent: missing required field "Thread.is_comment_disabled"`)}
	}
	if _, ok := tc.mutation.Visibility(); !ok {
		return &ValidationError{Name: "visibility", err: errors.New(`ent: missing required field "Thread.visibility"`)}
	}
	if v, ok := tc.mutation.Visibility(); ok {
		if err := thread.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Thread.visibility": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Thread.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := thread.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Thread.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "Thread.is_deleted"`)}
	}
	return nil
}

func (tc *ThreadCreate) sqlSave(ctx context.Context) (*Thread, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *ThreadCreate) createSpec() (*Thread, *sqlgraph.CreateSpec) {
	var (
		_node = &Thread{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(thread.Table, sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.Content(); ok {
		_spec.SetField(thread.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := tc.mutation.IsCommentDisabled(); ok {
		_spec.SetField(thread.FieldIsCommentDisabled, field.TypeBool, value)
		_node.IsCommentDisabled = value
	}
	if value, ok := tc.mutation.Visibility(); ok {
		_spec.SetField(thread.FieldVisibility, field.TypeEnum, value)
		_node.Visibility = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(thread.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.IsDeleted(); ok {
		_spec.SetField(thread.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	if nodes := tc.mutation.ParentThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.ParentThreadTable,
			Columns: []string{thread.ParentThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.thread_child_threads = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ChildThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.ChildThreadsTable,
			Columns: []string{thread.ChildThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.ImagesTable,
			Columns: thread.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ThreadCreateBulk is the builder for creating many Thread entities in bulk.
type ThreadCreateBulk struct {
	config
	err      error
	builders []*ThreadCreate
}

// Save creates the Thread entities in the database.
func (tcb *ThreadCreateBulk) Save(ctx context.Context) ([]*Thread, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Thread, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ThreadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *ThreadCreateBulk) SaveX(ctx context.Context) []*Thread {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *ThreadCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *ThreadCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
