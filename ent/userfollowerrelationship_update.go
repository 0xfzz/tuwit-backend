// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwitt/ent/predicate"
	"github.com/0xfzz/tuwitt/ent/useraccount"
	"github.com/0xfzz/tuwitt/ent/userfollowerrelationship"
)

// UserFollowerRelationshipUpdate is the builder for updating UserFollowerRelationship entities.
type UserFollowerRelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *UserFollowerRelationshipMutation
}

// Where appends a list predicates to the UserFollowerRelationshipUpdate builder.
func (ufru *UserFollowerRelationshipUpdate) Where(ps ...predicate.UserFollowerRelationship) *UserFollowerRelationshipUpdate {
	ufru.mutation.Where(ps...)
	return ufru
}

// SetUpdatedAt sets the "updated_at" field.
func (ufru *UserFollowerRelationshipUpdate) SetUpdatedAt(t time.Time) *UserFollowerRelationshipUpdate {
	ufru.mutation.SetUpdatedAt(t)
	return ufru
}

// SetUserID sets the "user_id" field.
func (ufru *UserFollowerRelationshipUpdate) SetUserID(i int) *UserFollowerRelationshipUpdate {
	ufru.mutation.SetUserID(i)
	return ufru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ufru *UserFollowerRelationshipUpdate) SetNillableUserID(i *int) *UserFollowerRelationshipUpdate {
	if i != nil {
		ufru.SetUserID(*i)
	}
	return ufru
}

// ClearUserID clears the value of the "user_id" field.
func (ufru *UserFollowerRelationshipUpdate) ClearUserID() *UserFollowerRelationshipUpdate {
	ufru.mutation.ClearUserID()
	return ufru
}

// SetFollowerID sets the "follower_id" field.
func (ufru *UserFollowerRelationshipUpdate) SetFollowerID(i int) *UserFollowerRelationshipUpdate {
	ufru.mutation.SetFollowerID(i)
	return ufru
}

// SetNillableFollowerID sets the "follower_id" field if the given value is not nil.
func (ufru *UserFollowerRelationshipUpdate) SetNillableFollowerID(i *int) *UserFollowerRelationshipUpdate {
	if i != nil {
		ufru.SetFollowerID(*i)
	}
	return ufru
}

// ClearFollowerID clears the value of the "follower_id" field.
func (ufru *UserFollowerRelationshipUpdate) ClearFollowerID() *UserFollowerRelationshipUpdate {
	ufru.mutation.ClearFollowerID()
	return ufru
}

// SetFollower sets the "follower" edge to the UserAccount entity.
func (ufru *UserFollowerRelationshipUpdate) SetFollower(u *UserAccount) *UserFollowerRelationshipUpdate {
	return ufru.SetFollowerID(u.ID)
}

// SetFollowingID sets the "following" edge to the UserAccount entity by ID.
func (ufru *UserFollowerRelationshipUpdate) SetFollowingID(id int) *UserFollowerRelationshipUpdate {
	ufru.mutation.SetFollowingID(id)
	return ufru
}

// SetNillableFollowingID sets the "following" edge to the UserAccount entity by ID if the given value is not nil.
func (ufru *UserFollowerRelationshipUpdate) SetNillableFollowingID(id *int) *UserFollowerRelationshipUpdate {
	if id != nil {
		ufru = ufru.SetFollowingID(*id)
	}
	return ufru
}

// SetFollowing sets the "following" edge to the UserAccount entity.
func (ufru *UserFollowerRelationshipUpdate) SetFollowing(u *UserAccount) *UserFollowerRelationshipUpdate {
	return ufru.SetFollowingID(u.ID)
}

// Mutation returns the UserFollowerRelationshipMutation object of the builder.
func (ufru *UserFollowerRelationshipUpdate) Mutation() *UserFollowerRelationshipMutation {
	return ufru.mutation
}

// ClearFollower clears the "follower" edge to the UserAccount entity.
func (ufru *UserFollowerRelationshipUpdate) ClearFollower() *UserFollowerRelationshipUpdate {
	ufru.mutation.ClearFollower()
	return ufru
}

// ClearFollowing clears the "following" edge to the UserAccount entity.
func (ufru *UserFollowerRelationshipUpdate) ClearFollowing() *UserFollowerRelationshipUpdate {
	ufru.mutation.ClearFollowing()
	return ufru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufru *UserFollowerRelationshipUpdate) Save(ctx context.Context) (int, error) {
	ufru.defaults()
	return withHooks(ctx, ufru.sqlSave, ufru.mutation, ufru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufru *UserFollowerRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := ufru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufru *UserFollowerRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := ufru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufru *UserFollowerRelationshipUpdate) ExecX(ctx context.Context) {
	if err := ufru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufru *UserFollowerRelationshipUpdate) defaults() {
	if _, ok := ufru.mutation.UpdatedAt(); !ok {
		v := userfollowerrelationship.UpdateDefaultUpdatedAt()
		ufru.mutation.SetUpdatedAt(v)
	}
}

func (ufru *UserFollowerRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userfollowerrelationship.Table, userfollowerrelationship.Columns, sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt))
	if ps := ufru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufru.mutation.UpdatedAt(); ok {
		_spec.SetField(userfollowerrelationship.FieldUpdatedAt, field.TypeTime, value)
	}
	if ufru.mutation.FollowerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowerrelationship.FollowerTable,
			Columns: []string{userfollowerrelationship.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufru.mutation.FollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowerrelationship.FollowerTable,
			Columns: []string{userfollowerrelationship.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufru.mutation.FollowingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowerrelationship.FollowingTable,
			Columns: []string{userfollowerrelationship.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufru.mutation.FollowingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowerrelationship.FollowingTable,
			Columns: []string{userfollowerrelationship.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfollowerrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufru.mutation.done = true
	return n, nil
}

// UserFollowerRelationshipUpdateOne is the builder for updating a single UserFollowerRelationship entity.
type UserFollowerRelationshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserFollowerRelationshipMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ufruo *UserFollowerRelationshipUpdateOne) SetUpdatedAt(t time.Time) *UserFollowerRelationshipUpdateOne {
	ufruo.mutation.SetUpdatedAt(t)
	return ufruo
}

// SetUserID sets the "user_id" field.
func (ufruo *UserFollowerRelationshipUpdateOne) SetUserID(i int) *UserFollowerRelationshipUpdateOne {
	ufruo.mutation.SetUserID(i)
	return ufruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ufruo *UserFollowerRelationshipUpdateOne) SetNillableUserID(i *int) *UserFollowerRelationshipUpdateOne {
	if i != nil {
		ufruo.SetUserID(*i)
	}
	return ufruo
}

// ClearUserID clears the value of the "user_id" field.
func (ufruo *UserFollowerRelationshipUpdateOne) ClearUserID() *UserFollowerRelationshipUpdateOne {
	ufruo.mutation.ClearUserID()
	return ufruo
}

// SetFollowerID sets the "follower_id" field.
func (ufruo *UserFollowerRelationshipUpdateOne) SetFollowerID(i int) *UserFollowerRelationshipUpdateOne {
	ufruo.mutation.SetFollowerID(i)
	return ufruo
}

// SetNillableFollowerID sets the "follower_id" field if the given value is not nil.
func (ufruo *UserFollowerRelationshipUpdateOne) SetNillableFollowerID(i *int) *UserFollowerRelationshipUpdateOne {
	if i != nil {
		ufruo.SetFollowerID(*i)
	}
	return ufruo
}

// ClearFollowerID clears the value of the "follower_id" field.
func (ufruo *UserFollowerRelationshipUpdateOne) ClearFollowerID() *UserFollowerRelationshipUpdateOne {
	ufruo.mutation.ClearFollowerID()
	return ufruo
}

// SetFollower sets the "follower" edge to the UserAccount entity.
func (ufruo *UserFollowerRelationshipUpdateOne) SetFollower(u *UserAccount) *UserFollowerRelationshipUpdateOne {
	return ufruo.SetFollowerID(u.ID)
}

// SetFollowingID sets the "following" edge to the UserAccount entity by ID.
func (ufruo *UserFollowerRelationshipUpdateOne) SetFollowingID(id int) *UserFollowerRelationshipUpdateOne {
	ufruo.mutation.SetFollowingID(id)
	return ufruo
}

// SetNillableFollowingID sets the "following" edge to the UserAccount entity by ID if the given value is not nil.
func (ufruo *UserFollowerRelationshipUpdateOne) SetNillableFollowingID(id *int) *UserFollowerRelationshipUpdateOne {
	if id != nil {
		ufruo = ufruo.SetFollowingID(*id)
	}
	return ufruo
}

// SetFollowing sets the "following" edge to the UserAccount entity.
func (ufruo *UserFollowerRelationshipUpdateOne) SetFollowing(u *UserAccount) *UserFollowerRelationshipUpdateOne {
	return ufruo.SetFollowingID(u.ID)
}

// Mutation returns the UserFollowerRelationshipMutation object of the builder.
func (ufruo *UserFollowerRelationshipUpdateOne) Mutation() *UserFollowerRelationshipMutation {
	return ufruo.mutation
}

// ClearFollower clears the "follower" edge to the UserAccount entity.
func (ufruo *UserFollowerRelationshipUpdateOne) ClearFollower() *UserFollowerRelationshipUpdateOne {
	ufruo.mutation.ClearFollower()
	return ufruo
}

// ClearFollowing clears the "following" edge to the UserAccount entity.
func (ufruo *UserFollowerRelationshipUpdateOne) ClearFollowing() *UserFollowerRelationshipUpdateOne {
	ufruo.mutation.ClearFollowing()
	return ufruo
}

// Where appends a list predicates to the UserFollowerRelationshipUpdate builder.
func (ufruo *UserFollowerRelationshipUpdateOne) Where(ps ...predicate.UserFollowerRelationship) *UserFollowerRelationshipUpdateOne {
	ufruo.mutation.Where(ps...)
	return ufruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufruo *UserFollowerRelationshipUpdateOne) Select(field string, fields ...string) *UserFollowerRelationshipUpdateOne {
	ufruo.fields = append([]string{field}, fields...)
	return ufruo
}

// Save executes the query and returns the updated UserFollowerRelationship entity.
func (ufruo *UserFollowerRelationshipUpdateOne) Save(ctx context.Context) (*UserFollowerRelationship, error) {
	ufruo.defaults()
	return withHooks(ctx, ufruo.sqlSave, ufruo.mutation, ufruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufruo *UserFollowerRelationshipUpdateOne) SaveX(ctx context.Context) *UserFollowerRelationship {
	node, err := ufruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufruo *UserFollowerRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := ufruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufruo *UserFollowerRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := ufruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufruo *UserFollowerRelationshipUpdateOne) defaults() {
	if _, ok := ufruo.mutation.UpdatedAt(); !ok {
		v := userfollowerrelationship.UpdateDefaultUpdatedAt()
		ufruo.mutation.SetUpdatedAt(v)
	}
}

func (ufruo *UserFollowerRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *UserFollowerRelationship, err error) {
	_spec := sqlgraph.NewUpdateSpec(userfollowerrelationship.Table, userfollowerrelationship.Columns, sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt))
	id, ok := ufruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserFollowerRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userfollowerrelationship.FieldID)
		for _, f := range fields {
			if !userfollowerrelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userfollowerrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufruo.mutation.UpdatedAt(); ok {
		_spec.SetField(userfollowerrelationship.FieldUpdatedAt, field.TypeTime, value)
	}
	if ufruo.mutation.FollowerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowerrelationship.FollowerTable,
			Columns: []string{userfollowerrelationship.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufruo.mutation.FollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowerrelationship.FollowerTable,
			Columns: []string{userfollowerrelationship.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufruo.mutation.FollowingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowerrelationship.FollowingTable,
			Columns: []string{userfollowerrelationship.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufruo.mutation.FollowingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowerrelationship.FollowingTable,
			Columns: []string{userfollowerrelationship.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserFollowerRelationship{config: ufruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfollowerrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufruo.mutation.done = true
	return _node, nil
}
