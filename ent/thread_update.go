// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwitt/ent/media"
	"github.com/0xfzz/tuwitt/ent/predicate"
	"github.com/0xfzz/tuwitt/ent/thread"
)

// ThreadUpdate is the builder for updating Thread entities.
type ThreadUpdate struct {
	config
	hooks    []Hook
	mutation *ThreadMutation
}

// Where appends a list predicates to the ThreadUpdate builder.
func (tu *ThreadUpdate) Where(ps ...predicate.Thread) *ThreadUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetContent sets the "content" field.
func (tu *ThreadUpdate) SetContent(s string) *ThreadUpdate {
	tu.mutation.SetContent(s)
	return tu
}

// SetIsCommentDisabled sets the "is_comment_disabled" field.
func (tu *ThreadUpdate) SetIsCommentDisabled(b bool) *ThreadUpdate {
	tu.mutation.SetIsCommentDisabled(b)
	return tu
}

// SetNillableIsCommentDisabled sets the "is_comment_disabled" field if the given value is not nil.
func (tu *ThreadUpdate) SetNillableIsCommentDisabled(b *bool) *ThreadUpdate {
	if b != nil {
		tu.SetIsCommentDisabled(*b)
	}
	return tu
}

// SetVisibility sets the "visibility" field.
func (tu *ThreadUpdate) SetVisibility(t thread.Visibility) *ThreadUpdate {
	tu.mutation.SetVisibility(t)
	return tu
}

// SetStatus sets the "status" field.
func (tu *ThreadUpdate) SetStatus(t thread.Status) *ThreadUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetIsDeleted sets the "is_deleted" field.
func (tu *ThreadUpdate) SetIsDeleted(b bool) *ThreadUpdate {
	tu.mutation.SetIsDeleted(b)
	return tu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (tu *ThreadUpdate) SetNillableIsDeleted(b *bool) *ThreadUpdate {
	if b != nil {
		tu.SetIsDeleted(*b)
	}
	return tu
}

// SetParentThreadID sets the "parent_thread" edge to the Thread entity by ID.
func (tu *ThreadUpdate) SetParentThreadID(id int) *ThreadUpdate {
	tu.mutation.SetParentThreadID(id)
	return tu
}

// SetNillableParentThreadID sets the "parent_thread" edge to the Thread entity by ID if the given value is not nil.
func (tu *ThreadUpdate) SetNillableParentThreadID(id *int) *ThreadUpdate {
	if id != nil {
		tu = tu.SetParentThreadID(*id)
	}
	return tu
}

// SetParentThread sets the "parent_thread" edge to the Thread entity.
func (tu *ThreadUpdate) SetParentThread(t *Thread) *ThreadUpdate {
	return tu.SetParentThreadID(t.ID)
}

// AddChildThreadIDs adds the "child_threads" edge to the Thread entity by IDs.
func (tu *ThreadUpdate) AddChildThreadIDs(ids ...int) *ThreadUpdate {
	tu.mutation.AddChildThreadIDs(ids...)
	return tu
}

// AddChildThreads adds the "child_threads" edges to the Thread entity.
func (tu *ThreadUpdate) AddChildThreads(t ...*Thread) *ThreadUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddChildThreadIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Media entity by IDs.
func (tu *ThreadUpdate) AddImageIDs(ids ...int) *ThreadUpdate {
	tu.mutation.AddImageIDs(ids...)
	return tu
}

// AddImages adds the "images" edges to the Media entity.
func (tu *ThreadUpdate) AddImages(m ...*Media) *ThreadUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.AddImageIDs(ids...)
}

// Mutation returns the ThreadMutation object of the builder.
func (tu *ThreadUpdate) Mutation() *ThreadMutation {
	return tu.mutation
}

// ClearParentThread clears the "parent_thread" edge to the Thread entity.
func (tu *ThreadUpdate) ClearParentThread() *ThreadUpdate {
	tu.mutation.ClearParentThread()
	return tu
}

// ClearChildThreads clears all "child_threads" edges to the Thread entity.
func (tu *ThreadUpdate) ClearChildThreads() *ThreadUpdate {
	tu.mutation.ClearChildThreads()
	return tu
}

// RemoveChildThreadIDs removes the "child_threads" edge to Thread entities by IDs.
func (tu *ThreadUpdate) RemoveChildThreadIDs(ids ...int) *ThreadUpdate {
	tu.mutation.RemoveChildThreadIDs(ids...)
	return tu
}

// RemoveChildThreads removes "child_threads" edges to Thread entities.
func (tu *ThreadUpdate) RemoveChildThreads(t ...*Thread) *ThreadUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveChildThreadIDs(ids...)
}

// ClearImages clears all "images" edges to the Media entity.
func (tu *ThreadUpdate) ClearImages() *ThreadUpdate {
	tu.mutation.ClearImages()
	return tu
}

// RemoveImageIDs removes the "images" edge to Media entities by IDs.
func (tu *ThreadUpdate) RemoveImageIDs(ids ...int) *ThreadUpdate {
	tu.mutation.RemoveImageIDs(ids...)
	return tu
}

// RemoveImages removes "images" edges to Media entities.
func (tu *ThreadUpdate) RemoveImages(m ...*Media) *ThreadUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *ThreadUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *ThreadUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *ThreadUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *ThreadUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *ThreadUpdate) check() error {
	if v, ok := tu.mutation.Visibility(); ok {
		if err := thread.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Thread.visibility": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := thread.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Thread.status": %w`, err)}
		}
	}
	return nil
}

func (tu *ThreadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(thread.Table, thread.Columns, sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Content(); ok {
		_spec.SetField(thread.FieldContent, field.TypeString, value)
	}
	if value, ok := tu.mutation.IsCommentDisabled(); ok {
		_spec.SetField(thread.FieldIsCommentDisabled, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Visibility(); ok {
		_spec.SetField(thread.FieldVisibility, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(thread.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.IsDeleted(); ok {
		_spec.SetField(thread.FieldIsDeleted, field.TypeBool, value)
	}
	if tu.mutation.ParentThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.ParentThreadTable,
			Columns: []string{thread.ParentThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ParentThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.ParentThreadTable,
			Columns: []string{thread.ParentThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ChildThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.ChildThreadsTable,
			Columns: []string{thread.ChildThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedChildThreadsIDs(); len(nodes) > 0 && !tu.mutation.ChildThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.ChildThreadsTable,
			Columns: []string{thread.ChildThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ChildThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.ChildThreadsTable,
			Columns: []string{thread.ChildThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.ImagesTable,
			Columns: thread.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !tu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.ImagesTable,
			Columns: thread.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.ImagesTable,
			Columns: thread.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thread.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// ThreadUpdateOne is the builder for updating a single Thread entity.
type ThreadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThreadMutation
}

// SetContent sets the "content" field.
func (tuo *ThreadUpdateOne) SetContent(s string) *ThreadUpdateOne {
	tuo.mutation.SetContent(s)
	return tuo
}

// SetIsCommentDisabled sets the "is_comment_disabled" field.
func (tuo *ThreadUpdateOne) SetIsCommentDisabled(b bool) *ThreadUpdateOne {
	tuo.mutation.SetIsCommentDisabled(b)
	return tuo
}

// SetNillableIsCommentDisabled sets the "is_comment_disabled" field if the given value is not nil.
func (tuo *ThreadUpdateOne) SetNillableIsCommentDisabled(b *bool) *ThreadUpdateOne {
	if b != nil {
		tuo.SetIsCommentDisabled(*b)
	}
	return tuo
}

// SetVisibility sets the "visibility" field.
func (tuo *ThreadUpdateOne) SetVisibility(t thread.Visibility) *ThreadUpdateOne {
	tuo.mutation.SetVisibility(t)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *ThreadUpdateOne) SetStatus(t thread.Status) *ThreadUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetIsDeleted sets the "is_deleted" field.
func (tuo *ThreadUpdateOne) SetIsDeleted(b bool) *ThreadUpdateOne {
	tuo.mutation.SetIsDeleted(b)
	return tuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (tuo *ThreadUpdateOne) SetNillableIsDeleted(b *bool) *ThreadUpdateOne {
	if b != nil {
		tuo.SetIsDeleted(*b)
	}
	return tuo
}

// SetParentThreadID sets the "parent_thread" edge to the Thread entity by ID.
func (tuo *ThreadUpdateOne) SetParentThreadID(id int) *ThreadUpdateOne {
	tuo.mutation.SetParentThreadID(id)
	return tuo
}

// SetNillableParentThreadID sets the "parent_thread" edge to the Thread entity by ID if the given value is not nil.
func (tuo *ThreadUpdateOne) SetNillableParentThreadID(id *int) *ThreadUpdateOne {
	if id != nil {
		tuo = tuo.SetParentThreadID(*id)
	}
	return tuo
}

// SetParentThread sets the "parent_thread" edge to the Thread entity.
func (tuo *ThreadUpdateOne) SetParentThread(t *Thread) *ThreadUpdateOne {
	return tuo.SetParentThreadID(t.ID)
}

// AddChildThreadIDs adds the "child_threads" edge to the Thread entity by IDs.
func (tuo *ThreadUpdateOne) AddChildThreadIDs(ids ...int) *ThreadUpdateOne {
	tuo.mutation.AddChildThreadIDs(ids...)
	return tuo
}

// AddChildThreads adds the "child_threads" edges to the Thread entity.
func (tuo *ThreadUpdateOne) AddChildThreads(t ...*Thread) *ThreadUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddChildThreadIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Media entity by IDs.
func (tuo *ThreadUpdateOne) AddImageIDs(ids ...int) *ThreadUpdateOne {
	tuo.mutation.AddImageIDs(ids...)
	return tuo
}

// AddImages adds the "images" edges to the Media entity.
func (tuo *ThreadUpdateOne) AddImages(m ...*Media) *ThreadUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.AddImageIDs(ids...)
}

// Mutation returns the ThreadMutation object of the builder.
func (tuo *ThreadUpdateOne) Mutation() *ThreadMutation {
	return tuo.mutation
}

// ClearParentThread clears the "parent_thread" edge to the Thread entity.
func (tuo *ThreadUpdateOne) ClearParentThread() *ThreadUpdateOne {
	tuo.mutation.ClearParentThread()
	return tuo
}

// ClearChildThreads clears all "child_threads" edges to the Thread entity.
func (tuo *ThreadUpdateOne) ClearChildThreads() *ThreadUpdateOne {
	tuo.mutation.ClearChildThreads()
	return tuo
}

// RemoveChildThreadIDs removes the "child_threads" edge to Thread entities by IDs.
func (tuo *ThreadUpdateOne) RemoveChildThreadIDs(ids ...int) *ThreadUpdateOne {
	tuo.mutation.RemoveChildThreadIDs(ids...)
	return tuo
}

// RemoveChildThreads removes "child_threads" edges to Thread entities.
func (tuo *ThreadUpdateOne) RemoveChildThreads(t ...*Thread) *ThreadUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveChildThreadIDs(ids...)
}

// ClearImages clears all "images" edges to the Media entity.
func (tuo *ThreadUpdateOne) ClearImages() *ThreadUpdateOne {
	tuo.mutation.ClearImages()
	return tuo
}

// RemoveImageIDs removes the "images" edge to Media entities by IDs.
func (tuo *ThreadUpdateOne) RemoveImageIDs(ids ...int) *ThreadUpdateOne {
	tuo.mutation.RemoveImageIDs(ids...)
	return tuo
}

// RemoveImages removes "images" edges to Media entities.
func (tuo *ThreadUpdateOne) RemoveImages(m ...*Media) *ThreadUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the ThreadUpdate builder.
func (tuo *ThreadUpdateOne) Where(ps ...predicate.Thread) *ThreadUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *ThreadUpdateOne) Select(field string, fields ...string) *ThreadUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Thread entity.
func (tuo *ThreadUpdateOne) Save(ctx context.Context) (*Thread, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *ThreadUpdateOne) SaveX(ctx context.Context) *Thread {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *ThreadUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *ThreadUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *ThreadUpdateOne) check() error {
	if v, ok := tuo.mutation.Visibility(); ok {
		if err := thread.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Thread.visibility": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := thread.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Thread.status": %w`, err)}
		}
	}
	return nil
}

func (tuo *ThreadUpdateOne) sqlSave(ctx context.Context) (_node *Thread, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(thread.Table, thread.Columns, sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Thread.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, thread.FieldID)
		for _, f := range fields {
			if !thread.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != thread.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Content(); ok {
		_spec.SetField(thread.FieldContent, field.TypeString, value)
	}
	if value, ok := tuo.mutation.IsCommentDisabled(); ok {
		_spec.SetField(thread.FieldIsCommentDisabled, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Visibility(); ok {
		_spec.SetField(thread.FieldVisibility, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(thread.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.IsDeleted(); ok {
		_spec.SetField(thread.FieldIsDeleted, field.TypeBool, value)
	}
	if tuo.mutation.ParentThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.ParentThreadTable,
			Columns: []string{thread.ParentThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ParentThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.ParentThreadTable,
			Columns: []string{thread.ParentThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ChildThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.ChildThreadsTable,
			Columns: []string{thread.ChildThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedChildThreadsIDs(); len(nodes) > 0 && !tuo.mutation.ChildThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.ChildThreadsTable,
			Columns: []string{thread.ChildThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ChildThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.ChildThreadsTable,
			Columns: []string{thread.ChildThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.ImagesTable,
			Columns: thread.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !tuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.ImagesTable,
			Columns: thread.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.ImagesTable,
			Columns: thread.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Thread{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thread.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
