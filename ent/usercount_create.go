// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwitt/ent/useraccount"
	"github.com/0xfzz/tuwitt/ent/usercount"
)

// UserCountCreate is the builder for creating a UserCount entity.
type UserCountCreate struct {
	config
	mutation *UserCountMutation
	hooks    []Hook
}

// SetFollowerCount sets the "follower_count" field.
func (ucc *UserCountCreate) SetFollowerCount(i int) *UserCountCreate {
	ucc.mutation.SetFollowerCount(i)
	return ucc
}

// SetNillableFollowerCount sets the "follower_count" field if the given value is not nil.
func (ucc *UserCountCreate) SetNillableFollowerCount(i *int) *UserCountCreate {
	if i != nil {
		ucc.SetFollowerCount(*i)
	}
	return ucc
}

// SetFollowingsCount sets the "followings_count" field.
func (ucc *UserCountCreate) SetFollowingsCount(i int) *UserCountCreate {
	ucc.mutation.SetFollowingsCount(i)
	return ucc
}

// SetNillableFollowingsCount sets the "followings_count" field if the given value is not nil.
func (ucc *UserCountCreate) SetNillableFollowingsCount(i *int) *UserCountCreate {
	if i != nil {
		ucc.SetFollowingsCount(*i)
	}
	return ucc
}

// AddUserIDs adds the "user" edge to the UserAccount entity by IDs.
func (ucc *UserCountCreate) AddUserIDs(ids ...int) *UserCountCreate {
	ucc.mutation.AddUserIDs(ids...)
	return ucc
}

// AddUser adds the "user" edges to the UserAccount entity.
func (ucc *UserCountCreate) AddUser(u ...*UserAccount) *UserCountCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ucc.AddUserIDs(ids...)
}

// Mutation returns the UserCountMutation object of the builder.
func (ucc *UserCountCreate) Mutation() *UserCountMutation {
	return ucc.mutation
}

// Save creates the UserCount in the database.
func (ucc *UserCountCreate) Save(ctx context.Context) (*UserCount, error) {
	ucc.defaults()
	return withHooks(ctx, ucc.sqlSave, ucc.mutation, ucc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UserCountCreate) SaveX(ctx context.Context) *UserCount {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucc *UserCountCreate) Exec(ctx context.Context) error {
	_, err := ucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucc *UserCountCreate) ExecX(ctx context.Context) {
	if err := ucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucc *UserCountCreate) defaults() {
	if _, ok := ucc.mutation.FollowerCount(); !ok {
		v := usercount.DefaultFollowerCount
		ucc.mutation.SetFollowerCount(v)
	}
	if _, ok := ucc.mutation.FollowingsCount(); !ok {
		v := usercount.DefaultFollowingsCount
		ucc.mutation.SetFollowingsCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UserCountCreate) check() error {
	if _, ok := ucc.mutation.FollowerCount(); !ok {
		return &ValidationError{Name: "follower_count", err: errors.New(`ent: missing required field "UserCount.follower_count"`)}
	}
	if _, ok := ucc.mutation.FollowingsCount(); !ok {
		return &ValidationError{Name: "followings_count", err: errors.New(`ent: missing required field "UserCount.followings_count"`)}
	}
	if len(ucc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserCount.user"`)}
	}
	return nil
}

func (ucc *UserCountCreate) sqlSave(ctx context.Context) (*UserCount, error) {
	if err := ucc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ucc.mutation.id = &_node.ID
	ucc.mutation.done = true
	return _node, nil
}

func (ucc *UserCountCreate) createSpec() (*UserCount, *sqlgraph.CreateSpec) {
	var (
		_node = &UserCount{config: ucc.config}
		_spec = sqlgraph.NewCreateSpec(usercount.Table, sqlgraph.NewFieldSpec(usercount.FieldID, field.TypeInt))
	)
	if value, ok := ucc.mutation.FollowerCount(); ok {
		_spec.SetField(usercount.FieldFollowerCount, field.TypeInt, value)
		_node.FollowerCount = value
	}
	if value, ok := ucc.mutation.FollowingsCount(); ok {
		_spec.SetField(usercount.FieldFollowingsCount, field.TypeInt, value)
		_node.FollowingsCount = value
	}
	if nodes := ucc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   usercount.UserTable,
			Columns: []string{usercount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCountCreateBulk is the builder for creating many UserCount entities in bulk.
type UserCountCreateBulk struct {
	config
	err      error
	builders []*UserCountCreate
}

// Save creates the UserCount entities in the database.
func (uccb *UserCountCreateBulk) Save(ctx context.Context) ([]*UserCount, error) {
	if uccb.err != nil {
		return nil, uccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UserCount, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserCountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UserCountCreateBulk) SaveX(ctx context.Context) []*UserCount {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uccb *UserCountCreateBulk) Exec(ctx context.Context) error {
	_, err := uccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uccb *UserCountCreateBulk) ExecX(ctx context.Context) {
	if err := uccb.Exec(ctx); err != nil {
		panic(err)
	}
}
