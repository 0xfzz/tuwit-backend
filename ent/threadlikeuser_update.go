// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwitt/ent/predicate"
	"github.com/0xfzz/tuwitt/ent/threadlikeuser"
)

// ThreadLikeUserUpdate is the builder for updating ThreadLikeUser entities.
type ThreadLikeUserUpdate struct {
	config
	hooks    []Hook
	mutation *ThreadLikeUserMutation
}

// Where appends a list predicates to the ThreadLikeUserUpdate builder.
func (tluu *ThreadLikeUserUpdate) Where(ps ...predicate.ThreadLikeUser) *ThreadLikeUserUpdate {
	tluu.mutation.Where(ps...)
	return tluu
}

// Mutation returns the ThreadLikeUserMutation object of the builder.
func (tluu *ThreadLikeUserUpdate) Mutation() *ThreadLikeUserMutation {
	return tluu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tluu *ThreadLikeUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tluu.sqlSave, tluu.mutation, tluu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tluu *ThreadLikeUserUpdate) SaveX(ctx context.Context) int {
	affected, err := tluu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tluu *ThreadLikeUserUpdate) Exec(ctx context.Context) error {
	_, err := tluu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluu *ThreadLikeUserUpdate) ExecX(ctx context.Context) {
	if err := tluu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tluu *ThreadLikeUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(threadlikeuser.Table, threadlikeuser.Columns, sqlgraph.NewFieldSpec(threadlikeuser.FieldID, field.TypeInt))
	if ps := tluu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tluu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadlikeuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tluu.mutation.done = true
	return n, nil
}

// ThreadLikeUserUpdateOne is the builder for updating a single ThreadLikeUser entity.
type ThreadLikeUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThreadLikeUserMutation
}

// Mutation returns the ThreadLikeUserMutation object of the builder.
func (tluuo *ThreadLikeUserUpdateOne) Mutation() *ThreadLikeUserMutation {
	return tluuo.mutation
}

// Where appends a list predicates to the ThreadLikeUserUpdate builder.
func (tluuo *ThreadLikeUserUpdateOne) Where(ps ...predicate.ThreadLikeUser) *ThreadLikeUserUpdateOne {
	tluuo.mutation.Where(ps...)
	return tluuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluuo *ThreadLikeUserUpdateOne) Select(field string, fields ...string) *ThreadLikeUserUpdateOne {
	tluuo.fields = append([]string{field}, fields...)
	return tluuo
}

// Save executes the query and returns the updated ThreadLikeUser entity.
func (tluuo *ThreadLikeUserUpdateOne) Save(ctx context.Context) (*ThreadLikeUser, error) {
	return withHooks(ctx, tluuo.sqlSave, tluuo.mutation, tluuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tluuo *ThreadLikeUserUpdateOne) SaveX(ctx context.Context) *ThreadLikeUser {
	node, err := tluuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluuo *ThreadLikeUserUpdateOne) Exec(ctx context.Context) error {
	_, err := tluuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluuo *ThreadLikeUserUpdateOne) ExecX(ctx context.Context) {
	if err := tluuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tluuo *ThreadLikeUserUpdateOne) sqlSave(ctx context.Context) (_node *ThreadLikeUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(threadlikeuser.Table, threadlikeuser.Columns, sqlgraph.NewFieldSpec(threadlikeuser.FieldID, field.TypeInt))
	id, ok := tluuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ThreadLikeUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, threadlikeuser.FieldID)
		for _, f := range fields {
			if !threadlikeuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != threadlikeuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &ThreadLikeUser{config: tluuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadlikeuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tluuo.mutation.done = true
	return _node, nil
}
