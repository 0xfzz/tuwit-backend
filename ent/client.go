// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/0xfzz/tuwit-backend/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/0xfzz/tuwit-backend/ent/blockedusersrelationship"
	"github.com/0xfzz/tuwit-backend/ent/media"
	"github.com/0xfzz/tuwit-backend/ent/thread"
	"github.com/0xfzz/tuwit-backend/ent/threadcount"
	"github.com/0xfzz/tuwit-backend/ent/threadlikeuser"
	"github.com/0xfzz/tuwit-backend/ent/useraccount"
	"github.com/0xfzz/tuwit-backend/ent/usercount"
	"github.com/0xfzz/tuwit-backend/ent/userfollowerrelationship"
	"github.com/0xfzz/tuwit-backend/ent/userprofile"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BlockedUsersRelationship is the client for interacting with the BlockedUsersRelationship builders.
	BlockedUsersRelationship *BlockedUsersRelationshipClient
	// Media is the client for interacting with the Media builders.
	Media *MediaClient
	// Thread is the client for interacting with the Thread builders.
	Thread *ThreadClient
	// ThreadCount is the client for interacting with the ThreadCount builders.
	ThreadCount *ThreadCountClient
	// ThreadLikeUser is the client for interacting with the ThreadLikeUser builders.
	ThreadLikeUser *ThreadLikeUserClient
	// UserAccount is the client for interacting with the UserAccount builders.
	UserAccount *UserAccountClient
	// UserCount is the client for interacting with the UserCount builders.
	UserCount *UserCountClient
	// UserFollowerRelationship is the client for interacting with the UserFollowerRelationship builders.
	UserFollowerRelationship *UserFollowerRelationshipClient
	// UserProfile is the client for interacting with the UserProfile builders.
	UserProfile *UserProfileClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BlockedUsersRelationship = NewBlockedUsersRelationshipClient(c.config)
	c.Media = NewMediaClient(c.config)
	c.Thread = NewThreadClient(c.config)
	c.ThreadCount = NewThreadCountClient(c.config)
	c.ThreadLikeUser = NewThreadLikeUserClient(c.config)
	c.UserAccount = NewUserAccountClient(c.config)
	c.UserCount = NewUserCountClient(c.config)
	c.UserFollowerRelationship = NewUserFollowerRelationshipClient(c.config)
	c.UserProfile = NewUserProfileClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		BlockedUsersRelationship: NewBlockedUsersRelationshipClient(cfg),
		Media:                    NewMediaClient(cfg),
		Thread:                   NewThreadClient(cfg),
		ThreadCount:              NewThreadCountClient(cfg),
		ThreadLikeUser:           NewThreadLikeUserClient(cfg),
		UserAccount:              NewUserAccountClient(cfg),
		UserCount:                NewUserCountClient(cfg),
		UserFollowerRelationship: NewUserFollowerRelationshipClient(cfg),
		UserProfile:              NewUserProfileClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		BlockedUsersRelationship: NewBlockedUsersRelationshipClient(cfg),
		Media:                    NewMediaClient(cfg),
		Thread:                   NewThreadClient(cfg),
		ThreadCount:              NewThreadCountClient(cfg),
		ThreadLikeUser:           NewThreadLikeUserClient(cfg),
		UserAccount:              NewUserAccountClient(cfg),
		UserCount:                NewUserCountClient(cfg),
		UserFollowerRelationship: NewUserFollowerRelationshipClient(cfg),
		UserProfile:              NewUserProfileClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BlockedUsersRelationship.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.BlockedUsersRelationship, c.Media, c.Thread, c.ThreadCount, c.ThreadLikeUser,
		c.UserAccount, c.UserCount, c.UserFollowerRelationship, c.UserProfile,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.BlockedUsersRelationship, c.Media, c.Thread, c.ThreadCount, c.ThreadLikeUser,
		c.UserAccount, c.UserCount, c.UserFollowerRelationship, c.UserProfile,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BlockedUsersRelationshipMutation:
		return c.BlockedUsersRelationship.mutate(ctx, m)
	case *MediaMutation:
		return c.Media.mutate(ctx, m)
	case *ThreadMutation:
		return c.Thread.mutate(ctx, m)
	case *ThreadCountMutation:
		return c.ThreadCount.mutate(ctx, m)
	case *ThreadLikeUserMutation:
		return c.ThreadLikeUser.mutate(ctx, m)
	case *UserAccountMutation:
		return c.UserAccount.mutate(ctx, m)
	case *UserCountMutation:
		return c.UserCount.mutate(ctx, m)
	case *UserFollowerRelationshipMutation:
		return c.UserFollowerRelationship.mutate(ctx, m)
	case *UserProfileMutation:
		return c.UserProfile.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BlockedUsersRelationshipClient is a client for the BlockedUsersRelationship schema.
type BlockedUsersRelationshipClient struct {
	config
}

// NewBlockedUsersRelationshipClient returns a client for the BlockedUsersRelationship from the given config.
func NewBlockedUsersRelationshipClient(c config) *BlockedUsersRelationshipClient {
	return &BlockedUsersRelationshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blockedusersrelationship.Hooks(f(g(h())))`.
func (c *BlockedUsersRelationshipClient) Use(hooks ...Hook) {
	c.hooks.BlockedUsersRelationship = append(c.hooks.BlockedUsersRelationship, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blockedusersrelationship.Intercept(f(g(h())))`.
func (c *BlockedUsersRelationshipClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlockedUsersRelationship = append(c.inters.BlockedUsersRelationship, interceptors...)
}

// Create returns a builder for creating a BlockedUsersRelationship entity.
func (c *BlockedUsersRelationshipClient) Create() *BlockedUsersRelationshipCreate {
	mutation := newBlockedUsersRelationshipMutation(c.config, OpCreate)
	return &BlockedUsersRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlockedUsersRelationship entities.
func (c *BlockedUsersRelationshipClient) CreateBulk(builders ...*BlockedUsersRelationshipCreate) *BlockedUsersRelationshipCreateBulk {
	return &BlockedUsersRelationshipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlockedUsersRelationshipClient) MapCreateBulk(slice any, setFunc func(*BlockedUsersRelationshipCreate, int)) *BlockedUsersRelationshipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlockedUsersRelationshipCreateBulk{err: fmt.Errorf("calling to BlockedUsersRelationshipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlockedUsersRelationshipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlockedUsersRelationshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlockedUsersRelationship.
func (c *BlockedUsersRelationshipClient) Update() *BlockedUsersRelationshipUpdate {
	mutation := newBlockedUsersRelationshipMutation(c.config, OpUpdate)
	return &BlockedUsersRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlockedUsersRelationshipClient) UpdateOne(bur *BlockedUsersRelationship) *BlockedUsersRelationshipUpdateOne {
	mutation := newBlockedUsersRelationshipMutation(c.config, OpUpdateOne, withBlockedUsersRelationship(bur))
	return &BlockedUsersRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlockedUsersRelationshipClient) UpdateOneID(id int) *BlockedUsersRelationshipUpdateOne {
	mutation := newBlockedUsersRelationshipMutation(c.config, OpUpdateOne, withBlockedUsersRelationshipID(id))
	return &BlockedUsersRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlockedUsersRelationship.
func (c *BlockedUsersRelationshipClient) Delete() *BlockedUsersRelationshipDelete {
	mutation := newBlockedUsersRelationshipMutation(c.config, OpDelete)
	return &BlockedUsersRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlockedUsersRelationshipClient) DeleteOne(bur *BlockedUsersRelationship) *BlockedUsersRelationshipDeleteOne {
	return c.DeleteOneID(bur.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlockedUsersRelationshipClient) DeleteOneID(id int) *BlockedUsersRelationshipDeleteOne {
	builder := c.Delete().Where(blockedusersrelationship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlockedUsersRelationshipDeleteOne{builder}
}

// Query returns a query builder for BlockedUsersRelationship.
func (c *BlockedUsersRelationshipClient) Query() *BlockedUsersRelationshipQuery {
	return &BlockedUsersRelationshipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlockedUsersRelationship},
		inters: c.Interceptors(),
	}
}

// Get returns a BlockedUsersRelationship entity by its id.
func (c *BlockedUsersRelationshipClient) Get(ctx context.Context, id int) (*BlockedUsersRelationship, error) {
	return c.Query().Where(blockedusersrelationship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlockedUsersRelationshipClient) GetX(ctx context.Context, id int) *BlockedUsersRelationship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlocker queries the blocker edge of a BlockedUsersRelationship.
func (c *BlockedUsersRelationshipClient) QueryBlocker(bur *BlockedUsersRelationship) *UserAccountQuery {
	query := (&UserAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blockedusersrelationship.Table, blockedusersrelationship.FieldID, id),
			sqlgraph.To(useraccount.Table, useraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blockedusersrelationship.BlockerTable, blockedusersrelationship.BlockerColumn),
		)
		fromV = sqlgraph.Neighbors(bur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlockedUser queries the blocked_user edge of a BlockedUsersRelationship.
func (c *BlockedUsersRelationshipClient) QueryBlockedUser(bur *BlockedUsersRelationship) *UserAccountQuery {
	query := (&UserAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blockedusersrelationship.Table, blockedusersrelationship.FieldID, id),
			sqlgraph.To(useraccount.Table, useraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blockedusersrelationship.BlockedUserTable, blockedusersrelationship.BlockedUserColumn),
		)
		fromV = sqlgraph.Neighbors(bur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlockedUsersRelationshipClient) Hooks() []Hook {
	return c.hooks.BlockedUsersRelationship
}

// Interceptors returns the client interceptors.
func (c *BlockedUsersRelationshipClient) Interceptors() []Interceptor {
	return c.inters.BlockedUsersRelationship
}

func (c *BlockedUsersRelationshipClient) mutate(ctx context.Context, m *BlockedUsersRelationshipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlockedUsersRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlockedUsersRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlockedUsersRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlockedUsersRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlockedUsersRelationship mutation op: %q", m.Op())
	}
}

// MediaClient is a client for the Media schema.
type MediaClient struct {
	config
}

// NewMediaClient returns a client for the Media from the given config.
func NewMediaClient(c config) *MediaClient {
	return &MediaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `media.Hooks(f(g(h())))`.
func (c *MediaClient) Use(hooks ...Hook) {
	c.hooks.Media = append(c.hooks.Media, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `media.Intercept(f(g(h())))`.
func (c *MediaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Media = append(c.inters.Media, interceptors...)
}

// Create returns a builder for creating a Media entity.
func (c *MediaClient) Create() *MediaCreate {
	mutation := newMediaMutation(c.config, OpCreate)
	return &MediaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Media entities.
func (c *MediaClient) CreateBulk(builders ...*MediaCreate) *MediaCreateBulk {
	return &MediaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MediaClient) MapCreateBulk(slice any, setFunc func(*MediaCreate, int)) *MediaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MediaCreateBulk{err: fmt.Errorf("calling to MediaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MediaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MediaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Media.
func (c *MediaClient) Update() *MediaUpdate {
	mutation := newMediaMutation(c.config, OpUpdate)
	return &MediaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MediaClient) UpdateOne(m *Media) *MediaUpdateOne {
	mutation := newMediaMutation(c.config, OpUpdateOne, withMedia(m))
	return &MediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MediaClient) UpdateOneID(id int) *MediaUpdateOne {
	mutation := newMediaMutation(c.config, OpUpdateOne, withMediaID(id))
	return &MediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Media.
func (c *MediaClient) Delete() *MediaDelete {
	mutation := newMediaMutation(c.config, OpDelete)
	return &MediaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MediaClient) DeleteOne(m *Media) *MediaDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MediaClient) DeleteOneID(id int) *MediaDeleteOne {
	builder := c.Delete().Where(media.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MediaDeleteOne{builder}
}

// Query returns a query builder for Media.
func (c *MediaClient) Query() *MediaQuery {
	return &MediaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMedia},
		inters: c.Interceptors(),
	}
}

// Get returns a Media entity by its id.
func (c *MediaClient) Get(ctx context.Context, id int) (*Media, error) {
	return c.Query().Where(media.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MediaClient) GetX(ctx context.Context, id int) *Media {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryThreads queries the threads edge of a Media.
func (c *MediaClient) QueryThreads(m *Media) *ThreadQuery {
	query := (&ThreadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(media.Table, media.FieldID, id),
			sqlgraph.To(thread.Table, thread.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, media.ThreadsTable, media.ThreadsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnerProfilePicture queries the owner_profile_picture edge of a Media.
func (c *MediaClient) QueryOwnerProfilePicture(m *Media) *UserProfileQuery {
	query := (&UserProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(media.Table, media.FieldID, id),
			sqlgraph.To(userprofile.Table, userprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, media.OwnerProfilePictureTable, media.OwnerProfilePictureColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnerBanner queries the owner_banner edge of a Media.
func (c *MediaClient) QueryOwnerBanner(m *Media) *UserProfileQuery {
	query := (&UserProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(media.Table, media.FieldID, id),
			sqlgraph.To(userprofile.Table, userprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, media.OwnerBannerTable, media.OwnerBannerColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MediaClient) Hooks() []Hook {
	return c.hooks.Media
}

// Interceptors returns the client interceptors.
func (c *MediaClient) Interceptors() []Interceptor {
	return c.inters.Media
}

func (c *MediaClient) mutate(ctx context.Context, m *MediaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MediaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MediaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MediaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Media mutation op: %q", m.Op())
	}
}

// ThreadClient is a client for the Thread schema.
type ThreadClient struct {
	config
}

// NewThreadClient returns a client for the Thread from the given config.
func NewThreadClient(c config) *ThreadClient {
	return &ThreadClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `thread.Hooks(f(g(h())))`.
func (c *ThreadClient) Use(hooks ...Hook) {
	c.hooks.Thread = append(c.hooks.Thread, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `thread.Intercept(f(g(h())))`.
func (c *ThreadClient) Intercept(interceptors ...Interceptor) {
	c.inters.Thread = append(c.inters.Thread, interceptors...)
}

// Create returns a builder for creating a Thread entity.
func (c *ThreadClient) Create() *ThreadCreate {
	mutation := newThreadMutation(c.config, OpCreate)
	return &ThreadCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Thread entities.
func (c *ThreadClient) CreateBulk(builders ...*ThreadCreate) *ThreadCreateBulk {
	return &ThreadCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ThreadClient) MapCreateBulk(slice any, setFunc func(*ThreadCreate, int)) *ThreadCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ThreadCreateBulk{err: fmt.Errorf("calling to ThreadClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ThreadCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ThreadCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Thread.
func (c *ThreadClient) Update() *ThreadUpdate {
	mutation := newThreadMutation(c.config, OpUpdate)
	return &ThreadUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ThreadClient) UpdateOne(t *Thread) *ThreadUpdateOne {
	mutation := newThreadMutation(c.config, OpUpdateOne, withThread(t))
	return &ThreadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ThreadClient) UpdateOneID(id int) *ThreadUpdateOne {
	mutation := newThreadMutation(c.config, OpUpdateOne, withThreadID(id))
	return &ThreadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Thread.
func (c *ThreadClient) Delete() *ThreadDelete {
	mutation := newThreadMutation(c.config, OpDelete)
	return &ThreadDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ThreadClient) DeleteOne(t *Thread) *ThreadDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ThreadClient) DeleteOneID(id int) *ThreadDeleteOne {
	builder := c.Delete().Where(thread.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ThreadDeleteOne{builder}
}

// Query returns a query builder for Thread.
func (c *ThreadClient) Query() *ThreadQuery {
	return &ThreadQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeThread},
		inters: c.Interceptors(),
	}
}

// Get returns a Thread entity by its id.
func (c *ThreadClient) Get(ctx context.Context, id int) (*Thread, error) {
	return c.Query().Where(thread.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ThreadClient) GetX(ctx context.Context, id int) *Thread {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a Thread.
func (c *ThreadClient) QueryAuthor(t *Thread) *UserAccountQuery {
	query := (&UserAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(thread.Table, thread.FieldID, id),
			sqlgraph.To(useraccount.Table, useraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, thread.AuthorTable, thread.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Thread.
func (c *ThreadClient) QueryParent(t *Thread) *ThreadQuery {
	query := (&ThreadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(thread.Table, thread.FieldID, id),
			sqlgraph.To(thread.Table, thread.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, thread.ParentTable, thread.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Thread.
func (c *ThreadClient) QueryChildren(t *Thread) *ThreadQuery {
	query := (&ThreadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(thread.Table, thread.FieldID, id),
			sqlgraph.To(thread.Table, thread.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, thread.ChildrenTable, thread.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryThreadCount queries the thread_count edge of a Thread.
func (c *ThreadClient) QueryThreadCount(t *Thread) *ThreadCountQuery {
	query := (&ThreadCountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(thread.Table, thread.FieldID, id),
			sqlgraph.To(threadcount.Table, threadcount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, thread.ThreadCountTable, thread.ThreadCountColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReposted queries the reposted edge of a Thread.
func (c *ThreadClient) QueryReposted(t *Thread) *ThreadQuery {
	query := (&ThreadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(thread.Table, thread.FieldID, id),
			sqlgraph.To(thread.Table, thread.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, thread.RepostedTable, thread.RepostedColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRepost queries the repost edge of a Thread.
func (c *ThreadClient) QueryRepost(t *Thread) *ThreadQuery {
	query := (&ThreadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(thread.Table, thread.FieldID, id),
			sqlgraph.To(thread.Table, thread.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, thread.RepostTable, thread.RepostColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImages queries the images edge of a Thread.
func (c *ThreadClient) QueryImages(t *Thread) *MediaQuery {
	query := (&MediaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(thread.Table, thread.FieldID, id),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, thread.ImagesTable, thread.ImagesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ThreadClient) Hooks() []Hook {
	return c.hooks.Thread
}

// Interceptors returns the client interceptors.
func (c *ThreadClient) Interceptors() []Interceptor {
	return c.inters.Thread
}

func (c *ThreadClient) mutate(ctx context.Context, m *ThreadMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ThreadCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ThreadUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ThreadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ThreadDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Thread mutation op: %q", m.Op())
	}
}

// ThreadCountClient is a client for the ThreadCount schema.
type ThreadCountClient struct {
	config
}

// NewThreadCountClient returns a client for the ThreadCount from the given config.
func NewThreadCountClient(c config) *ThreadCountClient {
	return &ThreadCountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `threadcount.Hooks(f(g(h())))`.
func (c *ThreadCountClient) Use(hooks ...Hook) {
	c.hooks.ThreadCount = append(c.hooks.ThreadCount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `threadcount.Intercept(f(g(h())))`.
func (c *ThreadCountClient) Intercept(interceptors ...Interceptor) {
	c.inters.ThreadCount = append(c.inters.ThreadCount, interceptors...)
}

// Create returns a builder for creating a ThreadCount entity.
func (c *ThreadCountClient) Create() *ThreadCountCreate {
	mutation := newThreadCountMutation(c.config, OpCreate)
	return &ThreadCountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ThreadCount entities.
func (c *ThreadCountClient) CreateBulk(builders ...*ThreadCountCreate) *ThreadCountCreateBulk {
	return &ThreadCountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ThreadCountClient) MapCreateBulk(slice any, setFunc func(*ThreadCountCreate, int)) *ThreadCountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ThreadCountCreateBulk{err: fmt.Errorf("calling to ThreadCountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ThreadCountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ThreadCountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ThreadCount.
func (c *ThreadCountClient) Update() *ThreadCountUpdate {
	mutation := newThreadCountMutation(c.config, OpUpdate)
	return &ThreadCountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ThreadCountClient) UpdateOne(tc *ThreadCount) *ThreadCountUpdateOne {
	mutation := newThreadCountMutation(c.config, OpUpdateOne, withThreadCount(tc))
	return &ThreadCountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ThreadCountClient) UpdateOneID(id int) *ThreadCountUpdateOne {
	mutation := newThreadCountMutation(c.config, OpUpdateOne, withThreadCountID(id))
	return &ThreadCountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ThreadCount.
func (c *ThreadCountClient) Delete() *ThreadCountDelete {
	mutation := newThreadCountMutation(c.config, OpDelete)
	return &ThreadCountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ThreadCountClient) DeleteOne(tc *ThreadCount) *ThreadCountDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ThreadCountClient) DeleteOneID(id int) *ThreadCountDeleteOne {
	builder := c.Delete().Where(threadcount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ThreadCountDeleteOne{builder}
}

// Query returns a query builder for ThreadCount.
func (c *ThreadCountClient) Query() *ThreadCountQuery {
	return &ThreadCountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeThreadCount},
		inters: c.Interceptors(),
	}
}

// Get returns a ThreadCount entity by its id.
func (c *ThreadCountClient) Get(ctx context.Context, id int) (*ThreadCount, error) {
	return c.Query().Where(threadcount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ThreadCountClient) GetX(ctx context.Context, id int) *ThreadCount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryThread queries the thread edge of a ThreadCount.
func (c *ThreadCountClient) QueryThread(tc *ThreadCount) *ThreadQuery {
	query := (&ThreadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(threadcount.Table, threadcount.FieldID, id),
			sqlgraph.To(thread.Table, thread.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, threadcount.ThreadTable, threadcount.ThreadColumn),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ThreadCountClient) Hooks() []Hook {
	return c.hooks.ThreadCount
}

// Interceptors returns the client interceptors.
func (c *ThreadCountClient) Interceptors() []Interceptor {
	return c.inters.ThreadCount
}

func (c *ThreadCountClient) mutate(ctx context.Context, m *ThreadCountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ThreadCountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ThreadCountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ThreadCountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ThreadCountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ThreadCount mutation op: %q", m.Op())
	}
}

// ThreadLikeUserClient is a client for the ThreadLikeUser schema.
type ThreadLikeUserClient struct {
	config
}

// NewThreadLikeUserClient returns a client for the ThreadLikeUser from the given config.
func NewThreadLikeUserClient(c config) *ThreadLikeUserClient {
	return &ThreadLikeUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `threadlikeuser.Hooks(f(g(h())))`.
func (c *ThreadLikeUserClient) Use(hooks ...Hook) {
	c.hooks.ThreadLikeUser = append(c.hooks.ThreadLikeUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `threadlikeuser.Intercept(f(g(h())))`.
func (c *ThreadLikeUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.ThreadLikeUser = append(c.inters.ThreadLikeUser, interceptors...)
}

// Create returns a builder for creating a ThreadLikeUser entity.
func (c *ThreadLikeUserClient) Create() *ThreadLikeUserCreate {
	mutation := newThreadLikeUserMutation(c.config, OpCreate)
	return &ThreadLikeUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ThreadLikeUser entities.
func (c *ThreadLikeUserClient) CreateBulk(builders ...*ThreadLikeUserCreate) *ThreadLikeUserCreateBulk {
	return &ThreadLikeUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ThreadLikeUserClient) MapCreateBulk(slice any, setFunc func(*ThreadLikeUserCreate, int)) *ThreadLikeUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ThreadLikeUserCreateBulk{err: fmt.Errorf("calling to ThreadLikeUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ThreadLikeUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ThreadLikeUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ThreadLikeUser.
func (c *ThreadLikeUserClient) Update() *ThreadLikeUserUpdate {
	mutation := newThreadLikeUserMutation(c.config, OpUpdate)
	return &ThreadLikeUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ThreadLikeUserClient) UpdateOne(tlu *ThreadLikeUser) *ThreadLikeUserUpdateOne {
	mutation := newThreadLikeUserMutation(c.config, OpUpdateOne, withThreadLikeUser(tlu))
	return &ThreadLikeUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ThreadLikeUserClient) UpdateOneID(id int) *ThreadLikeUserUpdateOne {
	mutation := newThreadLikeUserMutation(c.config, OpUpdateOne, withThreadLikeUserID(id))
	return &ThreadLikeUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ThreadLikeUser.
func (c *ThreadLikeUserClient) Delete() *ThreadLikeUserDelete {
	mutation := newThreadLikeUserMutation(c.config, OpDelete)
	return &ThreadLikeUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ThreadLikeUserClient) DeleteOne(tlu *ThreadLikeUser) *ThreadLikeUserDeleteOne {
	return c.DeleteOneID(tlu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ThreadLikeUserClient) DeleteOneID(id int) *ThreadLikeUserDeleteOne {
	builder := c.Delete().Where(threadlikeuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ThreadLikeUserDeleteOne{builder}
}

// Query returns a query builder for ThreadLikeUser.
func (c *ThreadLikeUserClient) Query() *ThreadLikeUserQuery {
	return &ThreadLikeUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeThreadLikeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a ThreadLikeUser entity by its id.
func (c *ThreadLikeUserClient) Get(ctx context.Context, id int) (*ThreadLikeUser, error) {
	return c.Query().Where(threadlikeuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ThreadLikeUserClient) GetX(ctx context.Context, id int) *ThreadLikeUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ThreadLikeUserClient) Hooks() []Hook {
	return c.hooks.ThreadLikeUser
}

// Interceptors returns the client interceptors.
func (c *ThreadLikeUserClient) Interceptors() []Interceptor {
	return c.inters.ThreadLikeUser
}

func (c *ThreadLikeUserClient) mutate(ctx context.Context, m *ThreadLikeUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ThreadLikeUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ThreadLikeUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ThreadLikeUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ThreadLikeUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ThreadLikeUser mutation op: %q", m.Op())
	}
}

// UserAccountClient is a client for the UserAccount schema.
type UserAccountClient struct {
	config
}

// NewUserAccountClient returns a client for the UserAccount from the given config.
func NewUserAccountClient(c config) *UserAccountClient {
	return &UserAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useraccount.Hooks(f(g(h())))`.
func (c *UserAccountClient) Use(hooks ...Hook) {
	c.hooks.UserAccount = append(c.hooks.UserAccount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `useraccount.Intercept(f(g(h())))`.
func (c *UserAccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserAccount = append(c.inters.UserAccount, interceptors...)
}

// Create returns a builder for creating a UserAccount entity.
func (c *UserAccountClient) Create() *UserAccountCreate {
	mutation := newUserAccountMutation(c.config, OpCreate)
	return &UserAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserAccount entities.
func (c *UserAccountClient) CreateBulk(builders ...*UserAccountCreate) *UserAccountCreateBulk {
	return &UserAccountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserAccountClient) MapCreateBulk(slice any, setFunc func(*UserAccountCreate, int)) *UserAccountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserAccountCreateBulk{err: fmt.Errorf("calling to UserAccountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserAccountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserAccount.
func (c *UserAccountClient) Update() *UserAccountUpdate {
	mutation := newUserAccountMutation(c.config, OpUpdate)
	return &UserAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserAccountClient) UpdateOne(ua *UserAccount) *UserAccountUpdateOne {
	mutation := newUserAccountMutation(c.config, OpUpdateOne, withUserAccount(ua))
	return &UserAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserAccountClient) UpdateOneID(id int) *UserAccountUpdateOne {
	mutation := newUserAccountMutation(c.config, OpUpdateOne, withUserAccountID(id))
	return &UserAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserAccount.
func (c *UserAccountClient) Delete() *UserAccountDelete {
	mutation := newUserAccountMutation(c.config, OpDelete)
	return &UserAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserAccountClient) DeleteOne(ua *UserAccount) *UserAccountDeleteOne {
	return c.DeleteOneID(ua.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserAccountClient) DeleteOneID(id int) *UserAccountDeleteOne {
	builder := c.Delete().Where(useraccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserAccountDeleteOne{builder}
}

// Query returns a query builder for UserAccount.
func (c *UserAccountClient) Query() *UserAccountQuery {
	return &UserAccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a UserAccount entity by its id.
func (c *UserAccountClient) Get(ctx context.Context, id int) (*UserAccount, error) {
	return c.Query().Where(useraccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserAccountClient) GetX(ctx context.Context, id int) *UserAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfile queries the profile edge of a UserAccount.
func (c *UserAccountClient) QueryProfile(ua *UserAccount) *UserProfileQuery {
	query := (&UserProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraccount.Table, useraccount.FieldID, id),
			sqlgraph.To(userprofile.Table, userprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, useraccount.ProfileTable, useraccount.ProfileColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFollowers queries the followers edge of a UserAccount.
func (c *UserAccountClient) QueryFollowers(ua *UserAccount) *UserFollowerRelationshipQuery {
	query := (&UserFollowerRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraccount.Table, useraccount.FieldID, id),
			sqlgraph.To(userfollowerrelationship.Table, userfollowerrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, useraccount.FollowersTable, useraccount.FollowersColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFollowings queries the followings edge of a UserAccount.
func (c *UserAccountClient) QueryFollowings(ua *UserAccount) *UserFollowerRelationshipQuery {
	query := (&UserFollowerRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraccount.Table, useraccount.FieldID, id),
			sqlgraph.To(userfollowerrelationship.Table, userfollowerrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, useraccount.FollowingsTable, useraccount.FollowingsColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlockedBy queries the blocked_by edge of a UserAccount.
func (c *UserAccountClient) QueryBlockedBy(ua *UserAccount) *BlockedUsersRelationshipQuery {
	query := (&BlockedUsersRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraccount.Table, useraccount.FieldID, id),
			sqlgraph.To(blockedusersrelationship.Table, blockedusersrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, useraccount.BlockedByTable, useraccount.BlockedByColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlockedUsers queries the blocked_users edge of a UserAccount.
func (c *UserAccountClient) QueryBlockedUsers(ua *UserAccount) *BlockedUsersRelationshipQuery {
	query := (&BlockedUsersRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraccount.Table, useraccount.FieldID, id),
			sqlgraph.To(blockedusersrelationship.Table, blockedusersrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, useraccount.BlockedUsersTable, useraccount.BlockedUsersColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserCount queries the user_count edge of a UserAccount.
func (c *UserAccountClient) QueryUserCount(ua *UserAccount) *UserCountQuery {
	query := (&UserCountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraccount.Table, useraccount.FieldID, id),
			sqlgraph.To(usercount.Table, usercount.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, useraccount.UserCountTable, useraccount.UserCountColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryThreads queries the threads edge of a UserAccount.
func (c *UserAccountClient) QueryThreads(ua *UserAccount) *ThreadQuery {
	query := (&ThreadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraccount.Table, useraccount.FieldID, id),
			sqlgraph.To(thread.Table, thread.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, useraccount.ThreadsTable, useraccount.ThreadsColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserAccountClient) Hooks() []Hook {
	return c.hooks.UserAccount
}

// Interceptors returns the client interceptors.
func (c *UserAccountClient) Interceptors() []Interceptor {
	return c.inters.UserAccount
}

func (c *UserAccountClient) mutate(ctx context.Context, m *UserAccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserAccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserAccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserAccount mutation op: %q", m.Op())
	}
}

// UserCountClient is a client for the UserCount schema.
type UserCountClient struct {
	config
}

// NewUserCountClient returns a client for the UserCount from the given config.
func NewUserCountClient(c config) *UserCountClient {
	return &UserCountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usercount.Hooks(f(g(h())))`.
func (c *UserCountClient) Use(hooks ...Hook) {
	c.hooks.UserCount = append(c.hooks.UserCount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usercount.Intercept(f(g(h())))`.
func (c *UserCountClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserCount = append(c.inters.UserCount, interceptors...)
}

// Create returns a builder for creating a UserCount entity.
func (c *UserCountClient) Create() *UserCountCreate {
	mutation := newUserCountMutation(c.config, OpCreate)
	return &UserCountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserCount entities.
func (c *UserCountClient) CreateBulk(builders ...*UserCountCreate) *UserCountCreateBulk {
	return &UserCountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserCountClient) MapCreateBulk(slice any, setFunc func(*UserCountCreate, int)) *UserCountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCountCreateBulk{err: fmt.Errorf("calling to UserCountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserCount.
func (c *UserCountClient) Update() *UserCountUpdate {
	mutation := newUserCountMutation(c.config, OpUpdate)
	return &UserCountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserCountClient) UpdateOne(uc *UserCount) *UserCountUpdateOne {
	mutation := newUserCountMutation(c.config, OpUpdateOne, withUserCount(uc))
	return &UserCountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserCountClient) UpdateOneID(id int) *UserCountUpdateOne {
	mutation := newUserCountMutation(c.config, OpUpdateOne, withUserCountID(id))
	return &UserCountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserCount.
func (c *UserCountClient) Delete() *UserCountDelete {
	mutation := newUserCountMutation(c.config, OpDelete)
	return &UserCountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserCountClient) DeleteOne(uc *UserCount) *UserCountDeleteOne {
	return c.DeleteOneID(uc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserCountClient) DeleteOneID(id int) *UserCountDeleteOne {
	builder := c.Delete().Where(usercount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserCountDeleteOne{builder}
}

// Query returns a query builder for UserCount.
func (c *UserCountClient) Query() *UserCountQuery {
	return &UserCountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserCount},
		inters: c.Interceptors(),
	}
}

// Get returns a UserCount entity by its id.
func (c *UserCountClient) Get(ctx context.Context, id int) (*UserCount, error) {
	return c.Query().Where(usercount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserCountClient) GetX(ctx context.Context, id int) *UserCount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserCount.
func (c *UserCountClient) QueryUser(uc *UserCount) *UserAccountQuery {
	query := (&UserAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usercount.Table, usercount.FieldID, id),
			sqlgraph.To(useraccount.Table, useraccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, usercount.UserTable, usercount.UserColumn),
		)
		fromV = sqlgraph.Neighbors(uc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserCountClient) Hooks() []Hook {
	return c.hooks.UserCount
}

// Interceptors returns the client interceptors.
func (c *UserCountClient) Interceptors() []Interceptor {
	return c.inters.UserCount
}

func (c *UserCountClient) mutate(ctx context.Context, m *UserCountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserCountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserCountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserCountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserCount mutation op: %q", m.Op())
	}
}

// UserFollowerRelationshipClient is a client for the UserFollowerRelationship schema.
type UserFollowerRelationshipClient struct {
	config
}

// NewUserFollowerRelationshipClient returns a client for the UserFollowerRelationship from the given config.
func NewUserFollowerRelationshipClient(c config) *UserFollowerRelationshipClient {
	return &UserFollowerRelationshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userfollowerrelationship.Hooks(f(g(h())))`.
func (c *UserFollowerRelationshipClient) Use(hooks ...Hook) {
	c.hooks.UserFollowerRelationship = append(c.hooks.UserFollowerRelationship, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userfollowerrelationship.Intercept(f(g(h())))`.
func (c *UserFollowerRelationshipClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserFollowerRelationship = append(c.inters.UserFollowerRelationship, interceptors...)
}

// Create returns a builder for creating a UserFollowerRelationship entity.
func (c *UserFollowerRelationshipClient) Create() *UserFollowerRelationshipCreate {
	mutation := newUserFollowerRelationshipMutation(c.config, OpCreate)
	return &UserFollowerRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserFollowerRelationship entities.
func (c *UserFollowerRelationshipClient) CreateBulk(builders ...*UserFollowerRelationshipCreate) *UserFollowerRelationshipCreateBulk {
	return &UserFollowerRelationshipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserFollowerRelationshipClient) MapCreateBulk(slice any, setFunc func(*UserFollowerRelationshipCreate, int)) *UserFollowerRelationshipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserFollowerRelationshipCreateBulk{err: fmt.Errorf("calling to UserFollowerRelationshipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserFollowerRelationshipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserFollowerRelationshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserFollowerRelationship.
func (c *UserFollowerRelationshipClient) Update() *UserFollowerRelationshipUpdate {
	mutation := newUserFollowerRelationshipMutation(c.config, OpUpdate)
	return &UserFollowerRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserFollowerRelationshipClient) UpdateOne(ufr *UserFollowerRelationship) *UserFollowerRelationshipUpdateOne {
	mutation := newUserFollowerRelationshipMutation(c.config, OpUpdateOne, withUserFollowerRelationship(ufr))
	return &UserFollowerRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserFollowerRelationshipClient) UpdateOneID(id int) *UserFollowerRelationshipUpdateOne {
	mutation := newUserFollowerRelationshipMutation(c.config, OpUpdateOne, withUserFollowerRelationshipID(id))
	return &UserFollowerRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserFollowerRelationship.
func (c *UserFollowerRelationshipClient) Delete() *UserFollowerRelationshipDelete {
	mutation := newUserFollowerRelationshipMutation(c.config, OpDelete)
	return &UserFollowerRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserFollowerRelationshipClient) DeleteOne(ufr *UserFollowerRelationship) *UserFollowerRelationshipDeleteOne {
	return c.DeleteOneID(ufr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserFollowerRelationshipClient) DeleteOneID(id int) *UserFollowerRelationshipDeleteOne {
	builder := c.Delete().Where(userfollowerrelationship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserFollowerRelationshipDeleteOne{builder}
}

// Query returns a query builder for UserFollowerRelationship.
func (c *UserFollowerRelationshipClient) Query() *UserFollowerRelationshipQuery {
	return &UserFollowerRelationshipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserFollowerRelationship},
		inters: c.Interceptors(),
	}
}

// Get returns a UserFollowerRelationship entity by its id.
func (c *UserFollowerRelationshipClient) Get(ctx context.Context, id int) (*UserFollowerRelationship, error) {
	return c.Query().Where(userfollowerrelationship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserFollowerRelationshipClient) GetX(ctx context.Context, id int) *UserFollowerRelationship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFollower queries the follower edge of a UserFollowerRelationship.
func (c *UserFollowerRelationshipClient) QueryFollower(ufr *UserFollowerRelationship) *UserAccountQuery {
	query := (&UserAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ufr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userfollowerrelationship.Table, userfollowerrelationship.FieldID, id),
			sqlgraph.To(useraccount.Table, useraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userfollowerrelationship.FollowerTable, userfollowerrelationship.FollowerColumn),
		)
		fromV = sqlgraph.Neighbors(ufr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFollowing queries the following edge of a UserFollowerRelationship.
func (c *UserFollowerRelationshipClient) QueryFollowing(ufr *UserFollowerRelationship) *UserAccountQuery {
	query := (&UserAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ufr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userfollowerrelationship.Table, userfollowerrelationship.FieldID, id),
			sqlgraph.To(useraccount.Table, useraccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userfollowerrelationship.FollowingTable, userfollowerrelationship.FollowingColumn),
		)
		fromV = sqlgraph.Neighbors(ufr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserFollowerRelationshipClient) Hooks() []Hook {
	return c.hooks.UserFollowerRelationship
}

// Interceptors returns the client interceptors.
func (c *UserFollowerRelationshipClient) Interceptors() []Interceptor {
	return c.inters.UserFollowerRelationship
}

func (c *UserFollowerRelationshipClient) mutate(ctx context.Context, m *UserFollowerRelationshipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserFollowerRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserFollowerRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserFollowerRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserFollowerRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserFollowerRelationship mutation op: %q", m.Op())
	}
}

// UserProfileClient is a client for the UserProfile schema.
type UserProfileClient struct {
	config
}

// NewUserProfileClient returns a client for the UserProfile from the given config.
func NewUserProfileClient(c config) *UserProfileClient {
	return &UserProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userprofile.Hooks(f(g(h())))`.
func (c *UserProfileClient) Use(hooks ...Hook) {
	c.hooks.UserProfile = append(c.hooks.UserProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userprofile.Intercept(f(g(h())))`.
func (c *UserProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserProfile = append(c.inters.UserProfile, interceptors...)
}

// Create returns a builder for creating a UserProfile entity.
func (c *UserProfileClient) Create() *UserProfileCreate {
	mutation := newUserProfileMutation(c.config, OpCreate)
	return &UserProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserProfile entities.
func (c *UserProfileClient) CreateBulk(builders ...*UserProfileCreate) *UserProfileCreateBulk {
	return &UserProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserProfileClient) MapCreateBulk(slice any, setFunc func(*UserProfileCreate, int)) *UserProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserProfileCreateBulk{err: fmt.Errorf("calling to UserProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserProfile.
func (c *UserProfileClient) Update() *UserProfileUpdate {
	mutation := newUserProfileMutation(c.config, OpUpdate)
	return &UserProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserProfileClient) UpdateOne(up *UserProfile) *UserProfileUpdateOne {
	mutation := newUserProfileMutation(c.config, OpUpdateOne, withUserProfile(up))
	return &UserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserProfileClient) UpdateOneID(id int) *UserProfileUpdateOne {
	mutation := newUserProfileMutation(c.config, OpUpdateOne, withUserProfileID(id))
	return &UserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserProfile.
func (c *UserProfileClient) Delete() *UserProfileDelete {
	mutation := newUserProfileMutation(c.config, OpDelete)
	return &UserProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserProfileClient) DeleteOne(up *UserProfile) *UserProfileDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserProfileClient) DeleteOneID(id int) *UserProfileDeleteOne {
	builder := c.Delete().Where(userprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserProfileDeleteOne{builder}
}

// Query returns a query builder for UserProfile.
func (c *UserProfileClient) Query() *UserProfileQuery {
	return &UserProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a UserProfile entity by its id.
func (c *UserProfileClient) Get(ctx context.Context, id int) (*UserProfile, error) {
	return c.Query().Where(userprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserProfileClient) GetX(ctx context.Context, id int) *UserProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccount queries the account edge of a UserProfile.
func (c *UserProfileClient) QueryAccount(up *UserProfile) *UserAccountQuery {
	query := (&UserAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userprofile.Table, userprofile.FieldID, id),
			sqlgraph.To(useraccount.Table, useraccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, userprofile.AccountTable, userprofile.AccountColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProfilePicture queries the profile_picture edge of a UserProfile.
func (c *UserProfileClient) QueryProfilePicture(up *UserProfile) *MediaQuery {
	query := (&MediaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userprofile.Table, userprofile.FieldID, id),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userprofile.ProfilePictureTable, userprofile.ProfilePictureColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBanner queries the banner edge of a UserProfile.
func (c *UserProfileClient) QueryBanner(up *UserProfile) *MediaQuery {
	query := (&MediaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userprofile.Table, userprofile.FieldID, id),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userprofile.BannerTable, userprofile.BannerColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserProfileClient) Hooks() []Hook {
	return c.hooks.UserProfile
}

// Interceptors returns the client interceptors.
func (c *UserProfileClient) Interceptors() []Interceptor {
	return c.inters.UserProfile
}

func (c *UserProfileClient) mutate(ctx context.Context, m *UserProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserProfile mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		BlockedUsersRelationship, Media, Thread, ThreadCount, ThreadLikeUser,
		UserAccount, UserCount, UserFollowerRelationship, UserProfile []ent.Hook
	}
	inters struct {
		BlockedUsersRelationship, Media, Thread, ThreadCount, ThreadLikeUser,
		UserAccount, UserCount, UserFollowerRelationship, UserProfile []ent.Interceptor
	}
)
