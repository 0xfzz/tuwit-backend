// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwitt/ent/useraccount"
	"github.com/0xfzz/tuwitt/ent/usercount"
	"github.com/0xfzz/tuwitt/ent/userprofile"
)

// UserAccountCreate is the builder for creating a UserAccount entity.
type UserAccountCreate struct {
	config
	mutation *UserAccountMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (uac *UserAccountCreate) SetEmail(s string) *UserAccountCreate {
	uac.mutation.SetEmail(s)
	return uac
}

// SetUsername sets the "username" field.
func (uac *UserAccountCreate) SetUsername(s string) *UserAccountCreate {
	uac.mutation.SetUsername(s)
	return uac
}

// SetPassword sets the "password" field.
func (uac *UserAccountCreate) SetPassword(s string) *UserAccountCreate {
	uac.mutation.SetPassword(s)
	return uac
}

// SetIsVerified sets the "is_verified" field.
func (uac *UserAccountCreate) SetIsVerified(b bool) *UserAccountCreate {
	uac.mutation.SetIsVerified(b)
	return uac
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableIsVerified(b *bool) *UserAccountCreate {
	if b != nil {
		uac.SetIsVerified(*b)
	}
	return uac
}

// SetIsPrivate sets the "is_private" field.
func (uac *UserAccountCreate) SetIsPrivate(b bool) *UserAccountCreate {
	uac.mutation.SetIsPrivate(b)
	return uac
}

// SetNillableIsPrivate sets the "is_private" field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableIsPrivate(b *bool) *UserAccountCreate {
	if b != nil {
		uac.SetIsPrivate(*b)
	}
	return uac
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (uac *UserAccountCreate) SetIsEmailVerified(b bool) *UserAccountCreate {
	uac.mutation.SetIsEmailVerified(b)
	return uac
}

// SetNillableIsEmailVerified sets the "is_email_verified" field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableIsEmailVerified(b *bool) *UserAccountCreate {
	if b != nil {
		uac.SetIsEmailVerified(*b)
	}
	return uac
}

// SetProfileID sets the "profile" edge to the UserProfile entity by ID.
func (uac *UserAccountCreate) SetProfileID(id int) *UserAccountCreate {
	uac.mutation.SetProfileID(id)
	return uac
}

// SetNillableProfileID sets the "profile" edge to the UserProfile entity by ID if the given value is not nil.
func (uac *UserAccountCreate) SetNillableProfileID(id *int) *UserAccountCreate {
	if id != nil {
		uac = uac.SetProfileID(*id)
	}
	return uac
}

// SetProfile sets the "profile" edge to the UserProfile entity.
func (uac *UserAccountCreate) SetProfile(u *UserProfile) *UserAccountCreate {
	return uac.SetProfileID(u.ID)
}

// AddFollowerIDs adds the "followers" edge to the UserAccount entity by IDs.
func (uac *UserAccountCreate) AddFollowerIDs(ids ...int) *UserAccountCreate {
	uac.mutation.AddFollowerIDs(ids...)
	return uac
}

// AddFollowers adds the "followers" edges to the UserAccount entity.
func (uac *UserAccountCreate) AddFollowers(u ...*UserAccount) *UserAccountCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uac.AddFollowerIDs(ids...)
}

// AddFollowingIDs adds the "following" edge to the UserAccount entity by IDs.
func (uac *UserAccountCreate) AddFollowingIDs(ids ...int) *UserAccountCreate {
	uac.mutation.AddFollowingIDs(ids...)
	return uac
}

// AddFollowing adds the "following" edges to the UserAccount entity.
func (uac *UserAccountCreate) AddFollowing(u ...*UserAccount) *UserAccountCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uac.AddFollowingIDs(ids...)
}

// AddBlockedByIDs adds the "blocked_by" edge to the UserAccount entity by IDs.
func (uac *UserAccountCreate) AddBlockedByIDs(ids ...int) *UserAccountCreate {
	uac.mutation.AddBlockedByIDs(ids...)
	return uac
}

// AddBlockedBy adds the "blocked_by" edges to the UserAccount entity.
func (uac *UserAccountCreate) AddBlockedBy(u ...*UserAccount) *UserAccountCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uac.AddBlockedByIDs(ids...)
}

// AddBlockedUserIDs adds the "blocked_user" edge to the UserAccount entity by IDs.
func (uac *UserAccountCreate) AddBlockedUserIDs(ids ...int) *UserAccountCreate {
	uac.mutation.AddBlockedUserIDs(ids...)
	return uac
}

// AddBlockedUser adds the "blocked_user" edges to the UserAccount entity.
func (uac *UserAccountCreate) AddBlockedUser(u ...*UserAccount) *UserAccountCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uac.AddBlockedUserIDs(ids...)
}

// SetUserCountInfoID sets the "user_count_info" edge to the UserCount entity by ID.
func (uac *UserAccountCreate) SetUserCountInfoID(id int) *UserAccountCreate {
	uac.mutation.SetUserCountInfoID(id)
	return uac
}

// SetNillableUserCountInfoID sets the "user_count_info" edge to the UserCount entity by ID if the given value is not nil.
func (uac *UserAccountCreate) SetNillableUserCountInfoID(id *int) *UserAccountCreate {
	if id != nil {
		uac = uac.SetUserCountInfoID(*id)
	}
	return uac
}

// SetUserCountInfo sets the "user_count_info" edge to the UserCount entity.
func (uac *UserAccountCreate) SetUserCountInfo(u *UserCount) *UserAccountCreate {
	return uac.SetUserCountInfoID(u.ID)
}

// Mutation returns the UserAccountMutation object of the builder.
func (uac *UserAccountCreate) Mutation() *UserAccountMutation {
	return uac.mutation
}

// Save creates the UserAccount in the database.
func (uac *UserAccountCreate) Save(ctx context.Context) (*UserAccount, error) {
	uac.defaults()
	return withHooks(ctx, uac.sqlSave, uac.mutation, uac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UserAccountCreate) SaveX(ctx context.Context) *UserAccount {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uac *UserAccountCreate) Exec(ctx context.Context) error {
	_, err := uac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uac *UserAccountCreate) ExecX(ctx context.Context) {
	if err := uac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uac *UserAccountCreate) defaults() {
	if _, ok := uac.mutation.IsVerified(); !ok {
		v := useraccount.DefaultIsVerified
		uac.mutation.SetIsVerified(v)
	}
	if _, ok := uac.mutation.IsPrivate(); !ok {
		v := useraccount.DefaultIsPrivate
		uac.mutation.SetIsPrivate(v)
	}
	if _, ok := uac.mutation.IsEmailVerified(); !ok {
		v := useraccount.DefaultIsEmailVerified
		uac.mutation.SetIsEmailVerified(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uac *UserAccountCreate) check() error {
	if _, ok := uac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "UserAccount.email"`)}
	}
	if _, ok := uac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "UserAccount.username"`)}
	}
	if _, ok := uac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "UserAccount.password"`)}
	}
	if _, ok := uac.mutation.IsVerified(); !ok {
		return &ValidationError{Name: "is_verified", err: errors.New(`ent: missing required field "UserAccount.is_verified"`)}
	}
	if _, ok := uac.mutation.IsPrivate(); !ok {
		return &ValidationError{Name: "is_private", err: errors.New(`ent: missing required field "UserAccount.is_private"`)}
	}
	if _, ok := uac.mutation.IsEmailVerified(); !ok {
		return &ValidationError{Name: "is_email_verified", err: errors.New(`ent: missing required field "UserAccount.is_email_verified"`)}
	}
	return nil
}

func (uac *UserAccountCreate) sqlSave(ctx context.Context) (*UserAccount, error) {
	if err := uac.check(); err != nil {
		return nil, err
	}
	_node, _spec := uac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uac.mutation.id = &_node.ID
	uac.mutation.done = true
	return _node, nil
}

func (uac *UserAccountCreate) createSpec() (*UserAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAccount{config: uac.config}
		_spec = sqlgraph.NewCreateSpec(useraccount.Table, sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt))
	)
	if value, ok := uac.mutation.Email(); ok {
		_spec.SetField(useraccount.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uac.mutation.Username(); ok {
		_spec.SetField(useraccount.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uac.mutation.Password(); ok {
		_spec.SetField(useraccount.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uac.mutation.IsVerified(); ok {
		_spec.SetField(useraccount.FieldIsVerified, field.TypeBool, value)
		_node.IsVerified = value
	}
	if value, ok := uac.mutation.IsPrivate(); ok {
		_spec.SetField(useraccount.FieldIsPrivate, field.TypeBool, value)
		_node.IsPrivate = value
	}
	if value, ok := uac.mutation.IsEmailVerified(); ok {
		_spec.SetField(useraccount.FieldIsEmailVerified, field.TypeBool, value)
		_node.IsEmailVerified = value
	}
	if nodes := uac.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useraccount.ProfileTable,
			Columns: []string{useraccount.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uac.mutation.FollowersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   useraccount.FollowersTable,
			Columns: useraccount.FollowersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uac.mutation.FollowingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   useraccount.FollowingTable,
			Columns: useraccount.FollowingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uac.mutation.BlockedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   useraccount.BlockedByTable,
			Columns: useraccount.BlockedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uac.mutation.BlockedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   useraccount.BlockedUserTable,
			Columns: useraccount.BlockedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uac.mutation.UserCountInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useraccount.UserCountInfoTable,
			Columns: []string{useraccount.UserCountInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_account_user_count_info = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserAccountCreateBulk is the builder for creating many UserAccount entities in bulk.
type UserAccountCreateBulk struct {
	config
	err      error
	builders []*UserAccountCreate
}

// Save creates the UserAccount entities in the database.
func (uacb *UserAccountCreateBulk) Save(ctx context.Context) ([]*UserAccount, error) {
	if uacb.err != nil {
		return nil, uacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uacb.builders))
	nodes := make([]*UserAccount, len(uacb.builders))
	mutators := make([]Mutator, len(uacb.builders))
	for i := range uacb.builders {
		func(i int, root context.Context) {
			builder := uacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uacb *UserAccountCreateBulk) SaveX(ctx context.Context) []*UserAccount {
	v, err := uacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uacb *UserAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := uacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uacb *UserAccountCreateBulk) ExecX(ctx context.Context) {
	if err := uacb.Exec(ctx); err != nil {
		panic(err)
	}
}
