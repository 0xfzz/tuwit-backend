// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwit-backend/ent/blockedusersrelationship"
	"github.com/0xfzz/tuwit-backend/ent/predicate"
	"github.com/0xfzz/tuwit-backend/ent/useraccount"
)

// BlockedUsersRelationshipUpdate is the builder for updating BlockedUsersRelationship entities.
type BlockedUsersRelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *BlockedUsersRelationshipMutation
}

// Where appends a list predicates to the BlockedUsersRelationshipUpdate builder.
func (buru *BlockedUsersRelationshipUpdate) Where(ps ...predicate.BlockedUsersRelationship) *BlockedUsersRelationshipUpdate {
	buru.mutation.Where(ps...)
	return buru
}

// SetUpdatedAt sets the "updated_at" field.
func (buru *BlockedUsersRelationshipUpdate) SetUpdatedAt(t time.Time) *BlockedUsersRelationshipUpdate {
	buru.mutation.SetUpdatedAt(t)
	return buru
}

// SetUserID sets the "user_id" field.
func (buru *BlockedUsersRelationshipUpdate) SetUserID(i int) *BlockedUsersRelationshipUpdate {
	buru.mutation.SetUserID(i)
	return buru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (buru *BlockedUsersRelationshipUpdate) SetNillableUserID(i *int) *BlockedUsersRelationshipUpdate {
	if i != nil {
		buru.SetUserID(*i)
	}
	return buru
}

// ClearUserID clears the value of the "user_id" field.
func (buru *BlockedUsersRelationshipUpdate) ClearUserID() *BlockedUsersRelationshipUpdate {
	buru.mutation.ClearUserID()
	return buru
}

// SetBlockerID sets the "blocker_id" field.
func (buru *BlockedUsersRelationshipUpdate) SetBlockerID(i int) *BlockedUsersRelationshipUpdate {
	buru.mutation.SetBlockerID(i)
	return buru
}

// SetNillableBlockerID sets the "blocker_id" field if the given value is not nil.
func (buru *BlockedUsersRelationshipUpdate) SetNillableBlockerID(i *int) *BlockedUsersRelationshipUpdate {
	if i != nil {
		buru.SetBlockerID(*i)
	}
	return buru
}

// ClearBlockerID clears the value of the "blocker_id" field.
func (buru *BlockedUsersRelationshipUpdate) ClearBlockerID() *BlockedUsersRelationshipUpdate {
	buru.mutation.ClearBlockerID()
	return buru
}

// SetBlocker sets the "blocker" edge to the UserAccount entity.
func (buru *BlockedUsersRelationshipUpdate) SetBlocker(u *UserAccount) *BlockedUsersRelationshipUpdate {
	return buru.SetBlockerID(u.ID)
}

// SetBlockedUserID sets the "blocked_user" edge to the UserAccount entity by ID.
func (buru *BlockedUsersRelationshipUpdate) SetBlockedUserID(id int) *BlockedUsersRelationshipUpdate {
	buru.mutation.SetBlockedUserID(id)
	return buru
}

// SetNillableBlockedUserID sets the "blocked_user" edge to the UserAccount entity by ID if the given value is not nil.
func (buru *BlockedUsersRelationshipUpdate) SetNillableBlockedUserID(id *int) *BlockedUsersRelationshipUpdate {
	if id != nil {
		buru = buru.SetBlockedUserID(*id)
	}
	return buru
}

// SetBlockedUser sets the "blocked_user" edge to the UserAccount entity.
func (buru *BlockedUsersRelationshipUpdate) SetBlockedUser(u *UserAccount) *BlockedUsersRelationshipUpdate {
	return buru.SetBlockedUserID(u.ID)
}

// Mutation returns the BlockedUsersRelationshipMutation object of the builder.
func (buru *BlockedUsersRelationshipUpdate) Mutation() *BlockedUsersRelationshipMutation {
	return buru.mutation
}

// ClearBlocker clears the "blocker" edge to the UserAccount entity.
func (buru *BlockedUsersRelationshipUpdate) ClearBlocker() *BlockedUsersRelationshipUpdate {
	buru.mutation.ClearBlocker()
	return buru
}

// ClearBlockedUser clears the "blocked_user" edge to the UserAccount entity.
func (buru *BlockedUsersRelationshipUpdate) ClearBlockedUser() *BlockedUsersRelationshipUpdate {
	buru.mutation.ClearBlockedUser()
	return buru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (buru *BlockedUsersRelationshipUpdate) Save(ctx context.Context) (int, error) {
	buru.defaults()
	return withHooks(ctx, buru.sqlSave, buru.mutation, buru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buru *BlockedUsersRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := buru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (buru *BlockedUsersRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := buru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buru *BlockedUsersRelationshipUpdate) ExecX(ctx context.Context) {
	if err := buru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buru *BlockedUsersRelationshipUpdate) defaults() {
	if _, ok := buru.mutation.UpdatedAt(); !ok {
		v := blockedusersrelationship.UpdateDefaultUpdatedAt()
		buru.mutation.SetUpdatedAt(v)
	}
}

func (buru *BlockedUsersRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(blockedusersrelationship.Table, blockedusersrelationship.Columns, sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt))
	if ps := buru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buru.mutation.UpdatedAt(); ok {
		_spec.SetField(blockedusersrelationship.FieldUpdatedAt, field.TypeTime, value)
	}
	if buru.mutation.BlockerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockedusersrelationship.BlockerTable,
			Columns: []string{blockedusersrelationship.BlockerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buru.mutation.BlockerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockedusersrelationship.BlockerTable,
			Columns: []string{blockedusersrelationship.BlockerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buru.mutation.BlockedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockedusersrelationship.BlockedUserTable,
			Columns: []string{blockedusersrelationship.BlockedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buru.mutation.BlockedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockedusersrelationship.BlockedUserTable,
			Columns: []string{blockedusersrelationship.BlockedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, buru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockedusersrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	buru.mutation.done = true
	return n, nil
}

// BlockedUsersRelationshipUpdateOne is the builder for updating a single BlockedUsersRelationship entity.
type BlockedUsersRelationshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockedUsersRelationshipMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buruo *BlockedUsersRelationshipUpdateOne) SetUpdatedAt(t time.Time) *BlockedUsersRelationshipUpdateOne {
	buruo.mutation.SetUpdatedAt(t)
	return buruo
}

// SetUserID sets the "user_id" field.
func (buruo *BlockedUsersRelationshipUpdateOne) SetUserID(i int) *BlockedUsersRelationshipUpdateOne {
	buruo.mutation.SetUserID(i)
	return buruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (buruo *BlockedUsersRelationshipUpdateOne) SetNillableUserID(i *int) *BlockedUsersRelationshipUpdateOne {
	if i != nil {
		buruo.SetUserID(*i)
	}
	return buruo
}

// ClearUserID clears the value of the "user_id" field.
func (buruo *BlockedUsersRelationshipUpdateOne) ClearUserID() *BlockedUsersRelationshipUpdateOne {
	buruo.mutation.ClearUserID()
	return buruo
}

// SetBlockerID sets the "blocker_id" field.
func (buruo *BlockedUsersRelationshipUpdateOne) SetBlockerID(i int) *BlockedUsersRelationshipUpdateOne {
	buruo.mutation.SetBlockerID(i)
	return buruo
}

// SetNillableBlockerID sets the "blocker_id" field if the given value is not nil.
func (buruo *BlockedUsersRelationshipUpdateOne) SetNillableBlockerID(i *int) *BlockedUsersRelationshipUpdateOne {
	if i != nil {
		buruo.SetBlockerID(*i)
	}
	return buruo
}

// ClearBlockerID clears the value of the "blocker_id" field.
func (buruo *BlockedUsersRelationshipUpdateOne) ClearBlockerID() *BlockedUsersRelationshipUpdateOne {
	buruo.mutation.ClearBlockerID()
	return buruo
}

// SetBlocker sets the "blocker" edge to the UserAccount entity.
func (buruo *BlockedUsersRelationshipUpdateOne) SetBlocker(u *UserAccount) *BlockedUsersRelationshipUpdateOne {
	return buruo.SetBlockerID(u.ID)
}

// SetBlockedUserID sets the "blocked_user" edge to the UserAccount entity by ID.
func (buruo *BlockedUsersRelationshipUpdateOne) SetBlockedUserID(id int) *BlockedUsersRelationshipUpdateOne {
	buruo.mutation.SetBlockedUserID(id)
	return buruo
}

// SetNillableBlockedUserID sets the "blocked_user" edge to the UserAccount entity by ID if the given value is not nil.
func (buruo *BlockedUsersRelationshipUpdateOne) SetNillableBlockedUserID(id *int) *BlockedUsersRelationshipUpdateOne {
	if id != nil {
		buruo = buruo.SetBlockedUserID(*id)
	}
	return buruo
}

// SetBlockedUser sets the "blocked_user" edge to the UserAccount entity.
func (buruo *BlockedUsersRelationshipUpdateOne) SetBlockedUser(u *UserAccount) *BlockedUsersRelationshipUpdateOne {
	return buruo.SetBlockedUserID(u.ID)
}

// Mutation returns the BlockedUsersRelationshipMutation object of the builder.
func (buruo *BlockedUsersRelationshipUpdateOne) Mutation() *BlockedUsersRelationshipMutation {
	return buruo.mutation
}

// ClearBlocker clears the "blocker" edge to the UserAccount entity.
func (buruo *BlockedUsersRelationshipUpdateOne) ClearBlocker() *BlockedUsersRelationshipUpdateOne {
	buruo.mutation.ClearBlocker()
	return buruo
}

// ClearBlockedUser clears the "blocked_user" edge to the UserAccount entity.
func (buruo *BlockedUsersRelationshipUpdateOne) ClearBlockedUser() *BlockedUsersRelationshipUpdateOne {
	buruo.mutation.ClearBlockedUser()
	return buruo
}

// Where appends a list predicates to the BlockedUsersRelationshipUpdate builder.
func (buruo *BlockedUsersRelationshipUpdateOne) Where(ps ...predicate.BlockedUsersRelationship) *BlockedUsersRelationshipUpdateOne {
	buruo.mutation.Where(ps...)
	return buruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buruo *BlockedUsersRelationshipUpdateOne) Select(field string, fields ...string) *BlockedUsersRelationshipUpdateOne {
	buruo.fields = append([]string{field}, fields...)
	return buruo
}

// Save executes the query and returns the updated BlockedUsersRelationship entity.
func (buruo *BlockedUsersRelationshipUpdateOne) Save(ctx context.Context) (*BlockedUsersRelationship, error) {
	buruo.defaults()
	return withHooks(ctx, buruo.sqlSave, buruo.mutation, buruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buruo *BlockedUsersRelationshipUpdateOne) SaveX(ctx context.Context) *BlockedUsersRelationship {
	node, err := buruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buruo *BlockedUsersRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := buruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buruo *BlockedUsersRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := buruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buruo *BlockedUsersRelationshipUpdateOne) defaults() {
	if _, ok := buruo.mutation.UpdatedAt(); !ok {
		v := blockedusersrelationship.UpdateDefaultUpdatedAt()
		buruo.mutation.SetUpdatedAt(v)
	}
}

func (buruo *BlockedUsersRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *BlockedUsersRelationship, err error) {
	_spec := sqlgraph.NewUpdateSpec(blockedusersrelationship.Table, blockedusersrelationship.Columns, sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt))
	id, ok := buruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockedUsersRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockedusersrelationship.FieldID)
		for _, f := range fields {
			if !blockedusersrelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockedusersrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buruo.mutation.UpdatedAt(); ok {
		_spec.SetField(blockedusersrelationship.FieldUpdatedAt, field.TypeTime, value)
	}
	if buruo.mutation.BlockerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockedusersrelationship.BlockerTable,
			Columns: []string{blockedusersrelationship.BlockerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buruo.mutation.BlockerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockedusersrelationship.BlockerTable,
			Columns: []string{blockedusersrelationship.BlockerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buruo.mutation.BlockedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockedusersrelationship.BlockedUserTable,
			Columns: []string{blockedusersrelationship.BlockedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buruo.mutation.BlockedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockedusersrelationship.BlockedUserTable,
			Columns: []string{blockedusersrelationship.BlockedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockedUsersRelationship{config: buruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockedusersrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buruo.mutation.done = true
	return _node, nil
}
