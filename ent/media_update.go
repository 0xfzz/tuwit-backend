// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwitt/ent/media"
	"github.com/0xfzz/tuwitt/ent/predicate"
	"github.com/0xfzz/tuwitt/ent/thread"
	"github.com/0xfzz/tuwitt/ent/userprofile"
)

// MediaUpdate is the builder for updating Media entities.
type MediaUpdate struct {
	config
	hooks    []Hook
	mutation *MediaMutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (mu *MediaUpdate) Where(ps ...predicate.Media) *MediaUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetPath sets the "path" field.
func (mu *MediaUpdate) SetPath(s string) *MediaUpdate {
	mu.mutation.SetPath(s)
	return mu
}

// SetCategory sets the "category" field.
func (mu *MediaUpdate) SetCategory(m media.Category) *MediaUpdate {
	mu.mutation.SetCategory(m)
	return mu
}

// AddThreadIDs adds the "threads" edge to the Thread entity by IDs.
func (mu *MediaUpdate) AddThreadIDs(ids ...int) *MediaUpdate {
	mu.mutation.AddThreadIDs(ids...)
	return mu
}

// AddThreads adds the "threads" edges to the Thread entity.
func (mu *MediaUpdate) AddThreads(t ...*Thread) *MediaUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddThreadIDs(ids...)
}

// AddOwnerProfilePictureIDs adds the "owner_profile_picture" edge to the UserProfile entity by IDs.
func (mu *MediaUpdate) AddOwnerProfilePictureIDs(ids ...int) *MediaUpdate {
	mu.mutation.AddOwnerProfilePictureIDs(ids...)
	return mu
}

// AddOwnerProfilePicture adds the "owner_profile_picture" edges to the UserProfile entity.
func (mu *MediaUpdate) AddOwnerProfilePicture(u ...*UserProfile) *MediaUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddOwnerProfilePictureIDs(ids...)
}

// AddOwnerBannerIDs adds the "owner_banner" edge to the UserProfile entity by IDs.
func (mu *MediaUpdate) AddOwnerBannerIDs(ids ...int) *MediaUpdate {
	mu.mutation.AddOwnerBannerIDs(ids...)
	return mu
}

// AddOwnerBanner adds the "owner_banner" edges to the UserProfile entity.
func (mu *MediaUpdate) AddOwnerBanner(u ...*UserProfile) *MediaUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddOwnerBannerIDs(ids...)
}

// Mutation returns the MediaMutation object of the builder.
func (mu *MediaUpdate) Mutation() *MediaMutation {
	return mu.mutation
}

// ClearThreads clears all "threads" edges to the Thread entity.
func (mu *MediaUpdate) ClearThreads() *MediaUpdate {
	mu.mutation.ClearThreads()
	return mu
}

// RemoveThreadIDs removes the "threads" edge to Thread entities by IDs.
func (mu *MediaUpdate) RemoveThreadIDs(ids ...int) *MediaUpdate {
	mu.mutation.RemoveThreadIDs(ids...)
	return mu
}

// RemoveThreads removes "threads" edges to Thread entities.
func (mu *MediaUpdate) RemoveThreads(t ...*Thread) *MediaUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveThreadIDs(ids...)
}

// ClearOwnerProfilePicture clears all "owner_profile_picture" edges to the UserProfile entity.
func (mu *MediaUpdate) ClearOwnerProfilePicture() *MediaUpdate {
	mu.mutation.ClearOwnerProfilePicture()
	return mu
}

// RemoveOwnerProfilePictureIDs removes the "owner_profile_picture" edge to UserProfile entities by IDs.
func (mu *MediaUpdate) RemoveOwnerProfilePictureIDs(ids ...int) *MediaUpdate {
	mu.mutation.RemoveOwnerProfilePictureIDs(ids...)
	return mu
}

// RemoveOwnerProfilePicture removes "owner_profile_picture" edges to UserProfile entities.
func (mu *MediaUpdate) RemoveOwnerProfilePicture(u ...*UserProfile) *MediaUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveOwnerProfilePictureIDs(ids...)
}

// ClearOwnerBanner clears all "owner_banner" edges to the UserProfile entity.
func (mu *MediaUpdate) ClearOwnerBanner() *MediaUpdate {
	mu.mutation.ClearOwnerBanner()
	return mu
}

// RemoveOwnerBannerIDs removes the "owner_banner" edge to UserProfile entities by IDs.
func (mu *MediaUpdate) RemoveOwnerBannerIDs(ids ...int) *MediaUpdate {
	mu.mutation.RemoveOwnerBannerIDs(ids...)
	return mu
}

// RemoveOwnerBanner removes "owner_banner" edges to UserProfile entities.
func (mu *MediaUpdate) RemoveOwnerBanner(u ...*UserProfile) *MediaUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveOwnerBannerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MediaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MediaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MediaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MediaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MediaUpdate) check() error {
	if v, ok := mu.mutation.Category(); ok {
		if err := media.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Media.category": %w`, err)}
		}
	}
	return nil
}

func (mu *MediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Path(); ok {
		_spec.SetField(media.FieldPath, field.TypeString, value)
	}
	if value, ok := mu.mutation.Category(); ok {
		_spec.SetField(media.FieldCategory, field.TypeEnum, value)
	}
	if mu.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.ThreadsTable,
			Columns: media.ThreadsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedThreadsIDs(); len(nodes) > 0 && !mu.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.ThreadsTable,
			Columns: media.ThreadsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.ThreadsTable,
			Columns: media.ThreadsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.OwnerProfilePictureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   media.OwnerProfilePictureTable,
			Columns: []string{media.OwnerProfilePictureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedOwnerProfilePictureIDs(); len(nodes) > 0 && !mu.mutation.OwnerProfilePictureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   media.OwnerProfilePictureTable,
			Columns: []string{media.OwnerProfilePictureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.OwnerProfilePictureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   media.OwnerProfilePictureTable,
			Columns: []string{media.OwnerProfilePictureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.OwnerBannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   media.OwnerBannerTable,
			Columns: []string{media.OwnerBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedOwnerBannerIDs(); len(nodes) > 0 && !mu.mutation.OwnerBannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   media.OwnerBannerTable,
			Columns: []string{media.OwnerBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.OwnerBannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   media.OwnerBannerTable,
			Columns: []string{media.OwnerBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MediaUpdateOne is the builder for updating a single Media entity.
type MediaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaMutation
}

// SetPath sets the "path" field.
func (muo *MediaUpdateOne) SetPath(s string) *MediaUpdateOne {
	muo.mutation.SetPath(s)
	return muo
}

// SetCategory sets the "category" field.
func (muo *MediaUpdateOne) SetCategory(m media.Category) *MediaUpdateOne {
	muo.mutation.SetCategory(m)
	return muo
}

// AddThreadIDs adds the "threads" edge to the Thread entity by IDs.
func (muo *MediaUpdateOne) AddThreadIDs(ids ...int) *MediaUpdateOne {
	muo.mutation.AddThreadIDs(ids...)
	return muo
}

// AddThreads adds the "threads" edges to the Thread entity.
func (muo *MediaUpdateOne) AddThreads(t ...*Thread) *MediaUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddThreadIDs(ids...)
}

// AddOwnerProfilePictureIDs adds the "owner_profile_picture" edge to the UserProfile entity by IDs.
func (muo *MediaUpdateOne) AddOwnerProfilePictureIDs(ids ...int) *MediaUpdateOne {
	muo.mutation.AddOwnerProfilePictureIDs(ids...)
	return muo
}

// AddOwnerProfilePicture adds the "owner_profile_picture" edges to the UserProfile entity.
func (muo *MediaUpdateOne) AddOwnerProfilePicture(u ...*UserProfile) *MediaUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddOwnerProfilePictureIDs(ids...)
}

// AddOwnerBannerIDs adds the "owner_banner" edge to the UserProfile entity by IDs.
func (muo *MediaUpdateOne) AddOwnerBannerIDs(ids ...int) *MediaUpdateOne {
	muo.mutation.AddOwnerBannerIDs(ids...)
	return muo
}

// AddOwnerBanner adds the "owner_banner" edges to the UserProfile entity.
func (muo *MediaUpdateOne) AddOwnerBanner(u ...*UserProfile) *MediaUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddOwnerBannerIDs(ids...)
}

// Mutation returns the MediaMutation object of the builder.
func (muo *MediaUpdateOne) Mutation() *MediaMutation {
	return muo.mutation
}

// ClearThreads clears all "threads" edges to the Thread entity.
func (muo *MediaUpdateOne) ClearThreads() *MediaUpdateOne {
	muo.mutation.ClearThreads()
	return muo
}

// RemoveThreadIDs removes the "threads" edge to Thread entities by IDs.
func (muo *MediaUpdateOne) RemoveThreadIDs(ids ...int) *MediaUpdateOne {
	muo.mutation.RemoveThreadIDs(ids...)
	return muo
}

// RemoveThreads removes "threads" edges to Thread entities.
func (muo *MediaUpdateOne) RemoveThreads(t ...*Thread) *MediaUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveThreadIDs(ids...)
}

// ClearOwnerProfilePicture clears all "owner_profile_picture" edges to the UserProfile entity.
func (muo *MediaUpdateOne) ClearOwnerProfilePicture() *MediaUpdateOne {
	muo.mutation.ClearOwnerProfilePicture()
	return muo
}

// RemoveOwnerProfilePictureIDs removes the "owner_profile_picture" edge to UserProfile entities by IDs.
func (muo *MediaUpdateOne) RemoveOwnerProfilePictureIDs(ids ...int) *MediaUpdateOne {
	muo.mutation.RemoveOwnerProfilePictureIDs(ids...)
	return muo
}

// RemoveOwnerProfilePicture removes "owner_profile_picture" edges to UserProfile entities.
func (muo *MediaUpdateOne) RemoveOwnerProfilePicture(u ...*UserProfile) *MediaUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveOwnerProfilePictureIDs(ids...)
}

// ClearOwnerBanner clears all "owner_banner" edges to the UserProfile entity.
func (muo *MediaUpdateOne) ClearOwnerBanner() *MediaUpdateOne {
	muo.mutation.ClearOwnerBanner()
	return muo
}

// RemoveOwnerBannerIDs removes the "owner_banner" edge to UserProfile entities by IDs.
func (muo *MediaUpdateOne) RemoveOwnerBannerIDs(ids ...int) *MediaUpdateOne {
	muo.mutation.RemoveOwnerBannerIDs(ids...)
	return muo
}

// RemoveOwnerBanner removes "owner_banner" edges to UserProfile entities.
func (muo *MediaUpdateOne) RemoveOwnerBanner(u ...*UserProfile) *MediaUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveOwnerBannerIDs(ids...)
}

// Where appends a list predicates to the MediaUpdate builder.
func (muo *MediaUpdateOne) Where(ps ...predicate.Media) *MediaUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MediaUpdateOne) Select(field string, fields ...string) *MediaUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Media entity.
func (muo *MediaUpdateOne) Save(ctx context.Context) (*Media, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MediaUpdateOne) SaveX(ctx context.Context) *Media {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MediaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MediaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MediaUpdateOne) check() error {
	if v, ok := muo.mutation.Category(); ok {
		if err := media.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Media.category": %w`, err)}
		}
	}
	return nil
}

func (muo *MediaUpdateOne) sqlSave(ctx context.Context) (_node *Media, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Media.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, media.FieldID)
		for _, f := range fields {
			if !media.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != media.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Path(); ok {
		_spec.SetField(media.FieldPath, field.TypeString, value)
	}
	if value, ok := muo.mutation.Category(); ok {
		_spec.SetField(media.FieldCategory, field.TypeEnum, value)
	}
	if muo.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.ThreadsTable,
			Columns: media.ThreadsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedThreadsIDs(); len(nodes) > 0 && !muo.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.ThreadsTable,
			Columns: media.ThreadsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.ThreadsTable,
			Columns: media.ThreadsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.OwnerProfilePictureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   media.OwnerProfilePictureTable,
			Columns: []string{media.OwnerProfilePictureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedOwnerProfilePictureIDs(); len(nodes) > 0 && !muo.mutation.OwnerProfilePictureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   media.OwnerProfilePictureTable,
			Columns: []string{media.OwnerProfilePictureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.OwnerProfilePictureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   media.OwnerProfilePictureTable,
			Columns: []string{media.OwnerProfilePictureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.OwnerBannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   media.OwnerBannerTable,
			Columns: []string{media.OwnerBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedOwnerBannerIDs(); len(nodes) > 0 && !muo.mutation.OwnerBannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   media.OwnerBannerTable,
			Columns: []string{media.OwnerBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.OwnerBannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   media.OwnerBannerTable,
			Columns: []string{media.OwnerBannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Media{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
