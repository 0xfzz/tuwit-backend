// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/0xfzz/tuwit-backend/ent/thread"
	"github.com/0xfzz/tuwit-backend/ent/useraccount"
)

// Thread is the model entity for the Thread schema.
type Thread struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// IsCommentDisabled holds the value of the "is_comment_disabled" field.
	IsCommentDisabled bool `json:"is_comment_disabled,omitempty"`
	// Visibility holds the value of the "visibility" field.
	Visibility thread.Visibility `json:"visibility,omitempty"`
	// Status holds the value of the "status" field.
	Status thread.Status `json:"status,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// AuthorID holds the value of the "author_id" field.
	AuthorID int `json:"author_id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID int `json:"parent_id,omitempty"`
	// RepostThreadID holds the value of the "repost_thread_id" field.
	RepostThreadID int `json:"repost_thread_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThreadQuery when eager-loading is set.
	Edges        ThreadEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ThreadEdges holds the relations/edges for other nodes in the graph.
type ThreadEdges struct {
	// Author holds the value of the author edge.
	Author *UserAccount `json:"author,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Thread `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Thread `json:"children,omitempty"`
	// ThreadCount holds the value of the thread_count edge.
	ThreadCount []*ThreadCount `json:"thread_count,omitempty"`
	// Reposted holds the value of the reposted edge.
	Reposted *Thread `json:"reposted,omitempty"`
	// Repost holds the value of the repost edge.
	Repost *Thread `json:"repost,omitempty"`
	// Images holds the value of the images edge.
	Images []*Media `json:"images,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadEdges) AuthorOrErr() (*UserAccount, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: useraccount.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadEdges) ParentOrErr() (*Thread, error) {
	if e.loadedTypes[1] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: thread.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) ChildrenOrErr() ([]*Thread, error) {
	if e.loadedTypes[2] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ThreadCountOrErr returns the ThreadCount value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) ThreadCountOrErr() ([]*ThreadCount, error) {
	if e.loadedTypes[3] {
		return e.ThreadCount, nil
	}
	return nil, &NotLoadedError{edge: "thread_count"}
}

// RepostedOrErr returns the Reposted value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadEdges) RepostedOrErr() (*Thread, error) {
	if e.loadedTypes[4] {
		if e.Reposted == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: thread.Label}
		}
		return e.Reposted, nil
	}
	return nil, &NotLoadedError{edge: "reposted"}
}

// RepostOrErr returns the Repost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadEdges) RepostOrErr() (*Thread, error) {
	if e.loadedTypes[5] {
		if e.Repost == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: thread.Label}
		}
		return e.Repost, nil
	}
	return nil, &NotLoadedError{edge: "repost"}
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) ImagesOrErr() ([]*Media, error) {
	if e.loadedTypes[6] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Thread) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case thread.FieldIsCommentDisabled, thread.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case thread.FieldID, thread.FieldAuthorID, thread.FieldParentID, thread.FieldRepostThreadID:
			values[i] = new(sql.NullInt64)
		case thread.FieldContent, thread.FieldVisibility, thread.FieldStatus:
			values[i] = new(sql.NullString)
		case thread.FieldCreatedAt, thread.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Thread fields.
func (t *Thread) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case thread.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case thread.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case thread.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case thread.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				t.Content = value.String
			}
		case thread.FieldIsCommentDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_comment_disabled", values[i])
			} else if value.Valid {
				t.IsCommentDisabled = value.Bool
			}
		case thread.FieldVisibility:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field visibility", values[i])
			} else if value.Valid {
				t.Visibility = thread.Visibility(value.String)
			}
		case thread.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = thread.Status(value.String)
			}
		case thread.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				t.IsDeleted = value.Bool
			}
		case thread.FieldAuthorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				t.AuthorID = int(value.Int64)
			}
		case thread.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				t.ParentID = int(value.Int64)
			}
		case thread.FieldRepostThreadID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field repost_thread_id", values[i])
			} else if value.Valid {
				t.RepostThreadID = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Thread.
// This includes values selected through modifiers, order, etc.
func (t *Thread) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the Thread entity.
func (t *Thread) QueryAuthor() *UserAccountQuery {
	return NewThreadClient(t.config).QueryAuthor(t)
}

// QueryParent queries the "parent" edge of the Thread entity.
func (t *Thread) QueryParent() *ThreadQuery {
	return NewThreadClient(t.config).QueryParent(t)
}

// QueryChildren queries the "children" edge of the Thread entity.
func (t *Thread) QueryChildren() *ThreadQuery {
	return NewThreadClient(t.config).QueryChildren(t)
}

// QueryThreadCount queries the "thread_count" edge of the Thread entity.
func (t *Thread) QueryThreadCount() *ThreadCountQuery {
	return NewThreadClient(t.config).QueryThreadCount(t)
}

// QueryReposted queries the "reposted" edge of the Thread entity.
func (t *Thread) QueryReposted() *ThreadQuery {
	return NewThreadClient(t.config).QueryReposted(t)
}

// QueryRepost queries the "repost" edge of the Thread entity.
func (t *Thread) QueryRepost() *ThreadQuery {
	return NewThreadClient(t.config).QueryRepost(t)
}

// QueryImages queries the "images" edge of the Thread entity.
func (t *Thread) QueryImages() *MediaQuery {
	return NewThreadClient(t.config).QueryImages(t)
}

// Update returns a builder for updating this Thread.
// Note that you need to call Thread.Unwrap() before calling this method if this Thread
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Thread) Update() *ThreadUpdateOne {
	return NewThreadClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Thread entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Thread) Unwrap() *Thread {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Thread is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Thread) String() string {
	var builder strings.Builder
	builder.WriteString("Thread(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(t.Content)
	builder.WriteString(", ")
	builder.WriteString("is_comment_disabled=")
	builder.WriteString(fmt.Sprintf("%v", t.IsCommentDisabled))
	builder.WriteString(", ")
	builder.WriteString("visibility=")
	builder.WriteString(fmt.Sprintf("%v", t.Visibility))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", t.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("author_id=")
	builder.WriteString(fmt.Sprintf("%v", t.AuthorID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ParentID))
	builder.WriteString(", ")
	builder.WriteString("repost_thread_id=")
	builder.WriteString(fmt.Sprintf("%v", t.RepostThreadID))
	builder.WriteByte(')')
	return builder.String()
}

// Threads is a parsable slice of Thread.
type Threads []*Thread
