// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/0xfzz/tuwitt/ent/media"
)

// Media is the model entity for the Media schema.
type Media struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Category holds the value of the "category" field.
	Category media.Category `json:"category,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaQuery when eager-loading is set.
	Edges        MediaEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MediaEdges holds the relations/edges for other nodes in the graph.
type MediaEdges struct {
	// Threads holds the value of the threads edge.
	Threads []*Thread `json:"threads,omitempty"`
	// OwnerProfilePicture holds the value of the owner_profile_picture edge.
	OwnerProfilePicture []*UserProfile `json:"owner_profile_picture,omitempty"`
	// OwnerBanner holds the value of the owner_banner edge.
	OwnerBanner []*UserProfile `json:"owner_banner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ThreadsOrErr returns the Threads value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) ThreadsOrErr() ([]*Thread, error) {
	if e.loadedTypes[0] {
		return e.Threads, nil
	}
	return nil, &NotLoadedError{edge: "threads"}
}

// OwnerProfilePictureOrErr returns the OwnerProfilePicture value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) OwnerProfilePictureOrErr() ([]*UserProfile, error) {
	if e.loadedTypes[1] {
		return e.OwnerProfilePicture, nil
	}
	return nil, &NotLoadedError{edge: "owner_profile_picture"}
}

// OwnerBannerOrErr returns the OwnerBanner value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) OwnerBannerOrErr() ([]*UserProfile, error) {
	if e.loadedTypes[2] {
		return e.OwnerBanner, nil
	}
	return nil, &NotLoadedError{edge: "owner_banner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Media) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case media.FieldID:
			values[i] = new(sql.NullInt64)
		case media.FieldPath, media.FieldCategory:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Media fields.
func (m *Media) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case media.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case media.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				m.Path = value.String
			}
		case media.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				m.Category = media.Category(value.String)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Media.
// This includes values selected through modifiers, order, etc.
func (m *Media) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryThreads queries the "threads" edge of the Media entity.
func (m *Media) QueryThreads() *ThreadQuery {
	return NewMediaClient(m.config).QueryThreads(m)
}

// QueryOwnerProfilePicture queries the "owner_profile_picture" edge of the Media entity.
func (m *Media) QueryOwnerProfilePicture() *UserProfileQuery {
	return NewMediaClient(m.config).QueryOwnerProfilePicture(m)
}

// QueryOwnerBanner queries the "owner_banner" edge of the Media entity.
func (m *Media) QueryOwnerBanner() *UserProfileQuery {
	return NewMediaClient(m.config).QueryOwnerBanner(m)
}

// Update returns a builder for updating this Media.
// Note that you need to call Media.Unwrap() before calling this method if this Media
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Media) Update() *MediaUpdateOne {
	return NewMediaClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Media entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Media) Unwrap() *Media {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Media is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Media) String() string {
	var builder strings.Builder
	builder.WriteString("Media(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("path=")
	builder.WriteString(m.Path)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", m.Category))
	builder.WriteByte(')')
	return builder.String()
}

// MediaSlice is a parsable slice of Media.
type MediaSlice []*Media
