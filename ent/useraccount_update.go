// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwitt/ent/blockedusersrelationship"
	"github.com/0xfzz/tuwitt/ent/predicate"
	"github.com/0xfzz/tuwitt/ent/thread"
	"github.com/0xfzz/tuwitt/ent/useraccount"
	"github.com/0xfzz/tuwitt/ent/usercount"
	"github.com/0xfzz/tuwitt/ent/userfollowerrelationship"
	"github.com/0xfzz/tuwitt/ent/userprofile"
)

// UserAccountUpdate is the builder for updating UserAccount entities.
type UserAccountUpdate struct {
	config
	hooks    []Hook
	mutation *UserAccountMutation
}

// Where appends a list predicates to the UserAccountUpdate builder.
func (uau *UserAccountUpdate) Where(ps ...predicate.UserAccount) *UserAccountUpdate {
	uau.mutation.Where(ps...)
	return uau
}

// SetEmail sets the "email" field.
func (uau *UserAccountUpdate) SetEmail(s string) *UserAccountUpdate {
	uau.mutation.SetEmail(s)
	return uau
}

// SetUsername sets the "username" field.
func (uau *UserAccountUpdate) SetUsername(s string) *UserAccountUpdate {
	uau.mutation.SetUsername(s)
	return uau
}

// SetPassword sets the "password" field.
func (uau *UserAccountUpdate) SetPassword(b []byte) *UserAccountUpdate {
	uau.mutation.SetPassword(b)
	return uau
}

// SetIsVerified sets the "is_verified" field.
func (uau *UserAccountUpdate) SetIsVerified(b bool) *UserAccountUpdate {
	uau.mutation.SetIsVerified(b)
	return uau
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableIsVerified(b *bool) *UserAccountUpdate {
	if b != nil {
		uau.SetIsVerified(*b)
	}
	return uau
}

// SetIsPrivate sets the "is_private" field.
func (uau *UserAccountUpdate) SetIsPrivate(b bool) *UserAccountUpdate {
	uau.mutation.SetIsPrivate(b)
	return uau
}

// SetNillableIsPrivate sets the "is_private" field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableIsPrivate(b *bool) *UserAccountUpdate {
	if b != nil {
		uau.SetIsPrivate(*b)
	}
	return uau
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (uau *UserAccountUpdate) SetIsEmailVerified(b bool) *UserAccountUpdate {
	uau.mutation.SetIsEmailVerified(b)
	return uau
}

// SetNillableIsEmailVerified sets the "is_email_verified" field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableIsEmailVerified(b *bool) *UserAccountUpdate {
	if b != nil {
		uau.SetIsEmailVerified(*b)
	}
	return uau
}

// SetProfileID sets the "profile" edge to the UserProfile entity by ID.
func (uau *UserAccountUpdate) SetProfileID(id int) *UserAccountUpdate {
	uau.mutation.SetProfileID(id)
	return uau
}

// SetNillableProfileID sets the "profile" edge to the UserProfile entity by ID if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableProfileID(id *int) *UserAccountUpdate {
	if id != nil {
		uau = uau.SetProfileID(*id)
	}
	return uau
}

// SetProfile sets the "profile" edge to the UserProfile entity.
func (uau *UserAccountUpdate) SetProfile(u *UserProfile) *UserAccountUpdate {
	return uau.SetProfileID(u.ID)
}

// AddFollowerIDs adds the "followers" edge to the UserFollowerRelationship entity by IDs.
func (uau *UserAccountUpdate) AddFollowerIDs(ids ...int) *UserAccountUpdate {
	uau.mutation.AddFollowerIDs(ids...)
	return uau
}

// AddFollowers adds the "followers" edges to the UserFollowerRelationship entity.
func (uau *UserAccountUpdate) AddFollowers(u ...*UserFollowerRelationship) *UserAccountUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uau.AddFollowerIDs(ids...)
}

// AddFollowingIDs adds the "followings" edge to the UserFollowerRelationship entity by IDs.
func (uau *UserAccountUpdate) AddFollowingIDs(ids ...int) *UserAccountUpdate {
	uau.mutation.AddFollowingIDs(ids...)
	return uau
}

// AddFollowings adds the "followings" edges to the UserFollowerRelationship entity.
func (uau *UserAccountUpdate) AddFollowings(u ...*UserFollowerRelationship) *UserAccountUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uau.AddFollowingIDs(ids...)
}

// AddBlockedByIDs adds the "blocked_by" edge to the BlockedUsersRelationship entity by IDs.
func (uau *UserAccountUpdate) AddBlockedByIDs(ids ...int) *UserAccountUpdate {
	uau.mutation.AddBlockedByIDs(ids...)
	return uau
}

// AddBlockedBy adds the "blocked_by" edges to the BlockedUsersRelationship entity.
func (uau *UserAccountUpdate) AddBlockedBy(b ...*BlockedUsersRelationship) *UserAccountUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uau.AddBlockedByIDs(ids...)
}

// AddBlockedUserIDs adds the "blocked_users" edge to the BlockedUsersRelationship entity by IDs.
func (uau *UserAccountUpdate) AddBlockedUserIDs(ids ...int) *UserAccountUpdate {
	uau.mutation.AddBlockedUserIDs(ids...)
	return uau
}

// AddBlockedUsers adds the "blocked_users" edges to the BlockedUsersRelationship entity.
func (uau *UserAccountUpdate) AddBlockedUsers(b ...*BlockedUsersRelationship) *UserAccountUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uau.AddBlockedUserIDs(ids...)
}

// SetUserCountID sets the "user_count" edge to the UserCount entity by ID.
func (uau *UserAccountUpdate) SetUserCountID(id int) *UserAccountUpdate {
	uau.mutation.SetUserCountID(id)
	return uau
}

// SetNillableUserCountID sets the "user_count" edge to the UserCount entity by ID if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableUserCountID(id *int) *UserAccountUpdate {
	if id != nil {
		uau = uau.SetUserCountID(*id)
	}
	return uau
}

// SetUserCount sets the "user_count" edge to the UserCount entity.
func (uau *UserAccountUpdate) SetUserCount(u *UserCount) *UserAccountUpdate {
	return uau.SetUserCountID(u.ID)
}

// AddThreadIDs adds the "threads" edge to the Thread entity by IDs.
func (uau *UserAccountUpdate) AddThreadIDs(ids ...int) *UserAccountUpdate {
	uau.mutation.AddThreadIDs(ids...)
	return uau
}

// AddThreads adds the "threads" edges to the Thread entity.
func (uau *UserAccountUpdate) AddThreads(t ...*Thread) *UserAccountUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uau.AddThreadIDs(ids...)
}

// Mutation returns the UserAccountMutation object of the builder.
func (uau *UserAccountUpdate) Mutation() *UserAccountMutation {
	return uau.mutation
}

// ClearProfile clears the "profile" edge to the UserProfile entity.
func (uau *UserAccountUpdate) ClearProfile() *UserAccountUpdate {
	uau.mutation.ClearProfile()
	return uau
}

// ClearFollowers clears all "followers" edges to the UserFollowerRelationship entity.
func (uau *UserAccountUpdate) ClearFollowers() *UserAccountUpdate {
	uau.mutation.ClearFollowers()
	return uau
}

// RemoveFollowerIDs removes the "followers" edge to UserFollowerRelationship entities by IDs.
func (uau *UserAccountUpdate) RemoveFollowerIDs(ids ...int) *UserAccountUpdate {
	uau.mutation.RemoveFollowerIDs(ids...)
	return uau
}

// RemoveFollowers removes "followers" edges to UserFollowerRelationship entities.
func (uau *UserAccountUpdate) RemoveFollowers(u ...*UserFollowerRelationship) *UserAccountUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uau.RemoveFollowerIDs(ids...)
}

// ClearFollowings clears all "followings" edges to the UserFollowerRelationship entity.
func (uau *UserAccountUpdate) ClearFollowings() *UserAccountUpdate {
	uau.mutation.ClearFollowings()
	return uau
}

// RemoveFollowingIDs removes the "followings" edge to UserFollowerRelationship entities by IDs.
func (uau *UserAccountUpdate) RemoveFollowingIDs(ids ...int) *UserAccountUpdate {
	uau.mutation.RemoveFollowingIDs(ids...)
	return uau
}

// RemoveFollowings removes "followings" edges to UserFollowerRelationship entities.
func (uau *UserAccountUpdate) RemoveFollowings(u ...*UserFollowerRelationship) *UserAccountUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uau.RemoveFollowingIDs(ids...)
}

// ClearBlockedBy clears all "blocked_by" edges to the BlockedUsersRelationship entity.
func (uau *UserAccountUpdate) ClearBlockedBy() *UserAccountUpdate {
	uau.mutation.ClearBlockedBy()
	return uau
}

// RemoveBlockedByIDs removes the "blocked_by" edge to BlockedUsersRelationship entities by IDs.
func (uau *UserAccountUpdate) RemoveBlockedByIDs(ids ...int) *UserAccountUpdate {
	uau.mutation.RemoveBlockedByIDs(ids...)
	return uau
}

// RemoveBlockedBy removes "blocked_by" edges to BlockedUsersRelationship entities.
func (uau *UserAccountUpdate) RemoveBlockedBy(b ...*BlockedUsersRelationship) *UserAccountUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uau.RemoveBlockedByIDs(ids...)
}

// ClearBlockedUsers clears all "blocked_users" edges to the BlockedUsersRelationship entity.
func (uau *UserAccountUpdate) ClearBlockedUsers() *UserAccountUpdate {
	uau.mutation.ClearBlockedUsers()
	return uau
}

// RemoveBlockedUserIDs removes the "blocked_users" edge to BlockedUsersRelationship entities by IDs.
func (uau *UserAccountUpdate) RemoveBlockedUserIDs(ids ...int) *UserAccountUpdate {
	uau.mutation.RemoveBlockedUserIDs(ids...)
	return uau
}

// RemoveBlockedUsers removes "blocked_users" edges to BlockedUsersRelationship entities.
func (uau *UserAccountUpdate) RemoveBlockedUsers(b ...*BlockedUsersRelationship) *UserAccountUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uau.RemoveBlockedUserIDs(ids...)
}

// ClearUserCount clears the "user_count" edge to the UserCount entity.
func (uau *UserAccountUpdate) ClearUserCount() *UserAccountUpdate {
	uau.mutation.ClearUserCount()
	return uau
}

// ClearThreads clears all "threads" edges to the Thread entity.
func (uau *UserAccountUpdate) ClearThreads() *UserAccountUpdate {
	uau.mutation.ClearThreads()
	return uau
}

// RemoveThreadIDs removes the "threads" edge to Thread entities by IDs.
func (uau *UserAccountUpdate) RemoveThreadIDs(ids ...int) *UserAccountUpdate {
	uau.mutation.RemoveThreadIDs(ids...)
	return uau
}

// RemoveThreads removes "threads" edges to Thread entities.
func (uau *UserAccountUpdate) RemoveThreads(t ...*Thread) *UserAccountUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uau.RemoveThreadIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uau *UserAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uau.sqlSave, uau.mutation, uau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UserAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UserAccountUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UserAccountUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uau *UserAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(useraccount.Table, useraccount.Columns, sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt))
	if ps := uau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.Email(); ok {
		_spec.SetField(useraccount.FieldEmail, field.TypeString, value)
	}
	if value, ok := uau.mutation.Username(); ok {
		_spec.SetField(useraccount.FieldUsername, field.TypeString, value)
	}
	if value, ok := uau.mutation.Password(); ok {
		_spec.SetField(useraccount.FieldPassword, field.TypeBytes, value)
	}
	if value, ok := uau.mutation.IsVerified(); ok {
		_spec.SetField(useraccount.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := uau.mutation.IsPrivate(); ok {
		_spec.SetField(useraccount.FieldIsPrivate, field.TypeBool, value)
	}
	if value, ok := uau.mutation.IsEmailVerified(); ok {
		_spec.SetField(useraccount.FieldIsEmailVerified, field.TypeBool, value)
	}
	if uau.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useraccount.ProfileTable,
			Columns: []string{useraccount.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useraccount.ProfileTable,
			Columns: []string{useraccount.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uau.mutation.FollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.FollowersTable,
			Columns: []string{useraccount.FollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.RemovedFollowersIDs(); len(nodes) > 0 && !uau.mutation.FollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.FollowersTable,
			Columns: []string{useraccount.FollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.FollowersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.FollowersTable,
			Columns: []string{useraccount.FollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uau.mutation.FollowingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.FollowingsTable,
			Columns: []string{useraccount.FollowingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.RemovedFollowingsIDs(); len(nodes) > 0 && !uau.mutation.FollowingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.FollowingsTable,
			Columns: []string{useraccount.FollowingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.FollowingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.FollowingsTable,
			Columns: []string{useraccount.FollowingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uau.mutation.BlockedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.BlockedByTable,
			Columns: []string{useraccount.BlockedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.RemovedBlockedByIDs(); len(nodes) > 0 && !uau.mutation.BlockedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.BlockedByTable,
			Columns: []string{useraccount.BlockedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.BlockedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.BlockedByTable,
			Columns: []string{useraccount.BlockedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uau.mutation.BlockedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.BlockedUsersTable,
			Columns: []string{useraccount.BlockedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.RemovedBlockedUsersIDs(); len(nodes) > 0 && !uau.mutation.BlockedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.BlockedUsersTable,
			Columns: []string{useraccount.BlockedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.BlockedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.BlockedUsersTable,
			Columns: []string{useraccount.BlockedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uau.mutation.UserCountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useraccount.UserCountTable,
			Columns: []string{useraccount.UserCountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.UserCountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useraccount.UserCountTable,
			Columns: []string{useraccount.UserCountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uau.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.ThreadsTable,
			Columns: []string{useraccount.ThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.RemovedThreadsIDs(); len(nodes) > 0 && !uau.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.ThreadsTable,
			Columns: []string{useraccount.ThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.ThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.ThreadsTable,
			Columns: []string{useraccount.ThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uau.mutation.done = true
	return n, nil
}

// UserAccountUpdateOne is the builder for updating a single UserAccount entity.
type UserAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAccountMutation
}

// SetEmail sets the "email" field.
func (uauo *UserAccountUpdateOne) SetEmail(s string) *UserAccountUpdateOne {
	uauo.mutation.SetEmail(s)
	return uauo
}

// SetUsername sets the "username" field.
func (uauo *UserAccountUpdateOne) SetUsername(s string) *UserAccountUpdateOne {
	uauo.mutation.SetUsername(s)
	return uauo
}

// SetPassword sets the "password" field.
func (uauo *UserAccountUpdateOne) SetPassword(b []byte) *UserAccountUpdateOne {
	uauo.mutation.SetPassword(b)
	return uauo
}

// SetIsVerified sets the "is_verified" field.
func (uauo *UserAccountUpdateOne) SetIsVerified(b bool) *UserAccountUpdateOne {
	uauo.mutation.SetIsVerified(b)
	return uauo
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableIsVerified(b *bool) *UserAccountUpdateOne {
	if b != nil {
		uauo.SetIsVerified(*b)
	}
	return uauo
}

// SetIsPrivate sets the "is_private" field.
func (uauo *UserAccountUpdateOne) SetIsPrivate(b bool) *UserAccountUpdateOne {
	uauo.mutation.SetIsPrivate(b)
	return uauo
}

// SetNillableIsPrivate sets the "is_private" field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableIsPrivate(b *bool) *UserAccountUpdateOne {
	if b != nil {
		uauo.SetIsPrivate(*b)
	}
	return uauo
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (uauo *UserAccountUpdateOne) SetIsEmailVerified(b bool) *UserAccountUpdateOne {
	uauo.mutation.SetIsEmailVerified(b)
	return uauo
}

// SetNillableIsEmailVerified sets the "is_email_verified" field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableIsEmailVerified(b *bool) *UserAccountUpdateOne {
	if b != nil {
		uauo.SetIsEmailVerified(*b)
	}
	return uauo
}

// SetProfileID sets the "profile" edge to the UserProfile entity by ID.
func (uauo *UserAccountUpdateOne) SetProfileID(id int) *UserAccountUpdateOne {
	uauo.mutation.SetProfileID(id)
	return uauo
}

// SetNillableProfileID sets the "profile" edge to the UserProfile entity by ID if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableProfileID(id *int) *UserAccountUpdateOne {
	if id != nil {
		uauo = uauo.SetProfileID(*id)
	}
	return uauo
}

// SetProfile sets the "profile" edge to the UserProfile entity.
func (uauo *UserAccountUpdateOne) SetProfile(u *UserProfile) *UserAccountUpdateOne {
	return uauo.SetProfileID(u.ID)
}

// AddFollowerIDs adds the "followers" edge to the UserFollowerRelationship entity by IDs.
func (uauo *UserAccountUpdateOne) AddFollowerIDs(ids ...int) *UserAccountUpdateOne {
	uauo.mutation.AddFollowerIDs(ids...)
	return uauo
}

// AddFollowers adds the "followers" edges to the UserFollowerRelationship entity.
func (uauo *UserAccountUpdateOne) AddFollowers(u ...*UserFollowerRelationship) *UserAccountUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uauo.AddFollowerIDs(ids...)
}

// AddFollowingIDs adds the "followings" edge to the UserFollowerRelationship entity by IDs.
func (uauo *UserAccountUpdateOne) AddFollowingIDs(ids ...int) *UserAccountUpdateOne {
	uauo.mutation.AddFollowingIDs(ids...)
	return uauo
}

// AddFollowings adds the "followings" edges to the UserFollowerRelationship entity.
func (uauo *UserAccountUpdateOne) AddFollowings(u ...*UserFollowerRelationship) *UserAccountUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uauo.AddFollowingIDs(ids...)
}

// AddBlockedByIDs adds the "blocked_by" edge to the BlockedUsersRelationship entity by IDs.
func (uauo *UserAccountUpdateOne) AddBlockedByIDs(ids ...int) *UserAccountUpdateOne {
	uauo.mutation.AddBlockedByIDs(ids...)
	return uauo
}

// AddBlockedBy adds the "blocked_by" edges to the BlockedUsersRelationship entity.
func (uauo *UserAccountUpdateOne) AddBlockedBy(b ...*BlockedUsersRelationship) *UserAccountUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uauo.AddBlockedByIDs(ids...)
}

// AddBlockedUserIDs adds the "blocked_users" edge to the BlockedUsersRelationship entity by IDs.
func (uauo *UserAccountUpdateOne) AddBlockedUserIDs(ids ...int) *UserAccountUpdateOne {
	uauo.mutation.AddBlockedUserIDs(ids...)
	return uauo
}

// AddBlockedUsers adds the "blocked_users" edges to the BlockedUsersRelationship entity.
func (uauo *UserAccountUpdateOne) AddBlockedUsers(b ...*BlockedUsersRelationship) *UserAccountUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uauo.AddBlockedUserIDs(ids...)
}

// SetUserCountID sets the "user_count" edge to the UserCount entity by ID.
func (uauo *UserAccountUpdateOne) SetUserCountID(id int) *UserAccountUpdateOne {
	uauo.mutation.SetUserCountID(id)
	return uauo
}

// SetNillableUserCountID sets the "user_count" edge to the UserCount entity by ID if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableUserCountID(id *int) *UserAccountUpdateOne {
	if id != nil {
		uauo = uauo.SetUserCountID(*id)
	}
	return uauo
}

// SetUserCount sets the "user_count" edge to the UserCount entity.
func (uauo *UserAccountUpdateOne) SetUserCount(u *UserCount) *UserAccountUpdateOne {
	return uauo.SetUserCountID(u.ID)
}

// AddThreadIDs adds the "threads" edge to the Thread entity by IDs.
func (uauo *UserAccountUpdateOne) AddThreadIDs(ids ...int) *UserAccountUpdateOne {
	uauo.mutation.AddThreadIDs(ids...)
	return uauo
}

// AddThreads adds the "threads" edges to the Thread entity.
func (uauo *UserAccountUpdateOne) AddThreads(t ...*Thread) *UserAccountUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uauo.AddThreadIDs(ids...)
}

// Mutation returns the UserAccountMutation object of the builder.
func (uauo *UserAccountUpdateOne) Mutation() *UserAccountMutation {
	return uauo.mutation
}

// ClearProfile clears the "profile" edge to the UserProfile entity.
func (uauo *UserAccountUpdateOne) ClearProfile() *UserAccountUpdateOne {
	uauo.mutation.ClearProfile()
	return uauo
}

// ClearFollowers clears all "followers" edges to the UserFollowerRelationship entity.
func (uauo *UserAccountUpdateOne) ClearFollowers() *UserAccountUpdateOne {
	uauo.mutation.ClearFollowers()
	return uauo
}

// RemoveFollowerIDs removes the "followers" edge to UserFollowerRelationship entities by IDs.
func (uauo *UserAccountUpdateOne) RemoveFollowerIDs(ids ...int) *UserAccountUpdateOne {
	uauo.mutation.RemoveFollowerIDs(ids...)
	return uauo
}

// RemoveFollowers removes "followers" edges to UserFollowerRelationship entities.
func (uauo *UserAccountUpdateOne) RemoveFollowers(u ...*UserFollowerRelationship) *UserAccountUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uauo.RemoveFollowerIDs(ids...)
}

// ClearFollowings clears all "followings" edges to the UserFollowerRelationship entity.
func (uauo *UserAccountUpdateOne) ClearFollowings() *UserAccountUpdateOne {
	uauo.mutation.ClearFollowings()
	return uauo
}

// RemoveFollowingIDs removes the "followings" edge to UserFollowerRelationship entities by IDs.
func (uauo *UserAccountUpdateOne) RemoveFollowingIDs(ids ...int) *UserAccountUpdateOne {
	uauo.mutation.RemoveFollowingIDs(ids...)
	return uauo
}

// RemoveFollowings removes "followings" edges to UserFollowerRelationship entities.
func (uauo *UserAccountUpdateOne) RemoveFollowings(u ...*UserFollowerRelationship) *UserAccountUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uauo.RemoveFollowingIDs(ids...)
}

// ClearBlockedBy clears all "blocked_by" edges to the BlockedUsersRelationship entity.
func (uauo *UserAccountUpdateOne) ClearBlockedBy() *UserAccountUpdateOne {
	uauo.mutation.ClearBlockedBy()
	return uauo
}

// RemoveBlockedByIDs removes the "blocked_by" edge to BlockedUsersRelationship entities by IDs.
func (uauo *UserAccountUpdateOne) RemoveBlockedByIDs(ids ...int) *UserAccountUpdateOne {
	uauo.mutation.RemoveBlockedByIDs(ids...)
	return uauo
}

// RemoveBlockedBy removes "blocked_by" edges to BlockedUsersRelationship entities.
func (uauo *UserAccountUpdateOne) RemoveBlockedBy(b ...*BlockedUsersRelationship) *UserAccountUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uauo.RemoveBlockedByIDs(ids...)
}

// ClearBlockedUsers clears all "blocked_users" edges to the BlockedUsersRelationship entity.
func (uauo *UserAccountUpdateOne) ClearBlockedUsers() *UserAccountUpdateOne {
	uauo.mutation.ClearBlockedUsers()
	return uauo
}

// RemoveBlockedUserIDs removes the "blocked_users" edge to BlockedUsersRelationship entities by IDs.
func (uauo *UserAccountUpdateOne) RemoveBlockedUserIDs(ids ...int) *UserAccountUpdateOne {
	uauo.mutation.RemoveBlockedUserIDs(ids...)
	return uauo
}

// RemoveBlockedUsers removes "blocked_users" edges to BlockedUsersRelationship entities.
func (uauo *UserAccountUpdateOne) RemoveBlockedUsers(b ...*BlockedUsersRelationship) *UserAccountUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uauo.RemoveBlockedUserIDs(ids...)
}

// ClearUserCount clears the "user_count" edge to the UserCount entity.
func (uauo *UserAccountUpdateOne) ClearUserCount() *UserAccountUpdateOne {
	uauo.mutation.ClearUserCount()
	return uauo
}

// ClearThreads clears all "threads" edges to the Thread entity.
func (uauo *UserAccountUpdateOne) ClearThreads() *UserAccountUpdateOne {
	uauo.mutation.ClearThreads()
	return uauo
}

// RemoveThreadIDs removes the "threads" edge to Thread entities by IDs.
func (uauo *UserAccountUpdateOne) RemoveThreadIDs(ids ...int) *UserAccountUpdateOne {
	uauo.mutation.RemoveThreadIDs(ids...)
	return uauo
}

// RemoveThreads removes "threads" edges to Thread entities.
func (uauo *UserAccountUpdateOne) RemoveThreads(t ...*Thread) *UserAccountUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uauo.RemoveThreadIDs(ids...)
}

// Where appends a list predicates to the UserAccountUpdate builder.
func (uauo *UserAccountUpdateOne) Where(ps ...predicate.UserAccount) *UserAccountUpdateOne {
	uauo.mutation.Where(ps...)
	return uauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uauo *UserAccountUpdateOne) Select(field string, fields ...string) *UserAccountUpdateOne {
	uauo.fields = append([]string{field}, fields...)
	return uauo
}

// Save executes the query and returns the updated UserAccount entity.
func (uauo *UserAccountUpdateOne) Save(ctx context.Context) (*UserAccount, error) {
	return withHooks(ctx, uauo.sqlSave, uauo.mutation, uauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UserAccountUpdateOne) SaveX(ctx context.Context) *UserAccount {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UserAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UserAccountUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uauo *UserAccountUpdateOne) sqlSave(ctx context.Context) (_node *UserAccount, err error) {
	_spec := sqlgraph.NewUpdateSpec(useraccount.Table, useraccount.Columns, sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt))
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useraccount.FieldID)
		for _, f := range fields {
			if !useraccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useraccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uauo.mutation.Email(); ok {
		_spec.SetField(useraccount.FieldEmail, field.TypeString, value)
	}
	if value, ok := uauo.mutation.Username(); ok {
		_spec.SetField(useraccount.FieldUsername, field.TypeString, value)
	}
	if value, ok := uauo.mutation.Password(); ok {
		_spec.SetField(useraccount.FieldPassword, field.TypeBytes, value)
	}
	if value, ok := uauo.mutation.IsVerified(); ok {
		_spec.SetField(useraccount.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := uauo.mutation.IsPrivate(); ok {
		_spec.SetField(useraccount.FieldIsPrivate, field.TypeBool, value)
	}
	if value, ok := uauo.mutation.IsEmailVerified(); ok {
		_spec.SetField(useraccount.FieldIsEmailVerified, field.TypeBool, value)
	}
	if uauo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useraccount.ProfileTable,
			Columns: []string{useraccount.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useraccount.ProfileTable,
			Columns: []string{useraccount.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uauo.mutation.FollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.FollowersTable,
			Columns: []string{useraccount.FollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.RemovedFollowersIDs(); len(nodes) > 0 && !uauo.mutation.FollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.FollowersTable,
			Columns: []string{useraccount.FollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.FollowersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.FollowersTable,
			Columns: []string{useraccount.FollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uauo.mutation.FollowingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.FollowingsTable,
			Columns: []string{useraccount.FollowingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.RemovedFollowingsIDs(); len(nodes) > 0 && !uauo.mutation.FollowingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.FollowingsTable,
			Columns: []string{useraccount.FollowingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.FollowingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.FollowingsTable,
			Columns: []string{useraccount.FollowingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uauo.mutation.BlockedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.BlockedByTable,
			Columns: []string{useraccount.BlockedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.RemovedBlockedByIDs(); len(nodes) > 0 && !uauo.mutation.BlockedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.BlockedByTable,
			Columns: []string{useraccount.BlockedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.BlockedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.BlockedByTable,
			Columns: []string{useraccount.BlockedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uauo.mutation.BlockedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.BlockedUsersTable,
			Columns: []string{useraccount.BlockedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.RemovedBlockedUsersIDs(); len(nodes) > 0 && !uauo.mutation.BlockedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.BlockedUsersTable,
			Columns: []string{useraccount.BlockedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.BlockedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.BlockedUsersTable,
			Columns: []string{useraccount.BlockedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uauo.mutation.UserCountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useraccount.UserCountTable,
			Columns: []string{useraccount.UserCountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.UserCountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useraccount.UserCountTable,
			Columns: []string{useraccount.UserCountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uauo.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.ThreadsTable,
			Columns: []string{useraccount.ThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.RemovedThreadsIDs(); len(nodes) > 0 && !uauo.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.ThreadsTable,
			Columns: []string{useraccount.ThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.ThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.ThreadsTable,
			Columns: []string{useraccount.ThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserAccount{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uauo.mutation.done = true
	return _node, nil
}
