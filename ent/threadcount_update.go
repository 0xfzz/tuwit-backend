// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwit-backend/ent/predicate"
	"github.com/0xfzz/tuwit-backend/ent/thread"
	"github.com/0xfzz/tuwit-backend/ent/threadcount"
)

// ThreadCountUpdate is the builder for updating ThreadCount entities.
type ThreadCountUpdate struct {
	config
	hooks    []Hook
	mutation *ThreadCountMutation
}

// Where appends a list predicates to the ThreadCountUpdate builder.
func (tcu *ThreadCountUpdate) Where(ps ...predicate.ThreadCount) *ThreadCountUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetReplyCount sets the "reply_count" field.
func (tcu *ThreadCountUpdate) SetReplyCount(i int) *ThreadCountUpdate {
	tcu.mutation.ResetReplyCount()
	tcu.mutation.SetReplyCount(i)
	return tcu
}

// SetNillableReplyCount sets the "reply_count" field if the given value is not nil.
func (tcu *ThreadCountUpdate) SetNillableReplyCount(i *int) *ThreadCountUpdate {
	if i != nil {
		tcu.SetReplyCount(*i)
	}
	return tcu
}

// AddReplyCount adds i to the "reply_count" field.
func (tcu *ThreadCountUpdate) AddReplyCount(i int) *ThreadCountUpdate {
	tcu.mutation.AddReplyCount(i)
	return tcu
}

// SetLikeCount sets the "like_count" field.
func (tcu *ThreadCountUpdate) SetLikeCount(i int) *ThreadCountUpdate {
	tcu.mutation.ResetLikeCount()
	tcu.mutation.SetLikeCount(i)
	return tcu
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (tcu *ThreadCountUpdate) SetNillableLikeCount(i *int) *ThreadCountUpdate {
	if i != nil {
		tcu.SetLikeCount(*i)
	}
	return tcu
}

// AddLikeCount adds i to the "like_count" field.
func (tcu *ThreadCountUpdate) AddLikeCount(i int) *ThreadCountUpdate {
	tcu.mutation.AddLikeCount(i)
	return tcu
}

// SetThreadID sets the "thread" edge to the Thread entity by ID.
func (tcu *ThreadCountUpdate) SetThreadID(id int) *ThreadCountUpdate {
	tcu.mutation.SetThreadID(id)
	return tcu
}

// SetThread sets the "thread" edge to the Thread entity.
func (tcu *ThreadCountUpdate) SetThread(t *Thread) *ThreadCountUpdate {
	return tcu.SetThreadID(t.ID)
}

// Mutation returns the ThreadCountMutation object of the builder.
func (tcu *ThreadCountUpdate) Mutation() *ThreadCountMutation {
	return tcu.mutation
}

// ClearThread clears the "thread" edge to the Thread entity.
func (tcu *ThreadCountUpdate) ClearThread() *ThreadCountUpdate {
	tcu.mutation.ClearThread()
	return tcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *ThreadCountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *ThreadCountUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *ThreadCountUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *ThreadCountUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcu *ThreadCountUpdate) check() error {
	if _, ok := tcu.mutation.ThreadID(); tcu.mutation.ThreadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ThreadCount.thread"`)
	}
	return nil
}

func (tcu *ThreadCountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(threadcount.Table, threadcount.Columns, sqlgraph.NewFieldSpec(threadcount.FieldID, field.TypeInt))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.ReplyCount(); ok {
		_spec.SetField(threadcount.FieldReplyCount, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.AddedReplyCount(); ok {
		_spec.AddField(threadcount.FieldReplyCount, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.LikeCount(); ok {
		_spec.SetField(threadcount.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.AddedLikeCount(); ok {
		_spec.AddField(threadcount.FieldLikeCount, field.TypeInt, value)
	}
	if tcu.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcount.ThreadTable,
			Columns: []string{threadcount.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcount.ThreadTable,
			Columns: []string{threadcount.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadcount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// ThreadCountUpdateOne is the builder for updating a single ThreadCount entity.
type ThreadCountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThreadCountMutation
}

// SetReplyCount sets the "reply_count" field.
func (tcuo *ThreadCountUpdateOne) SetReplyCount(i int) *ThreadCountUpdateOne {
	tcuo.mutation.ResetReplyCount()
	tcuo.mutation.SetReplyCount(i)
	return tcuo
}

// SetNillableReplyCount sets the "reply_count" field if the given value is not nil.
func (tcuo *ThreadCountUpdateOne) SetNillableReplyCount(i *int) *ThreadCountUpdateOne {
	if i != nil {
		tcuo.SetReplyCount(*i)
	}
	return tcuo
}

// AddReplyCount adds i to the "reply_count" field.
func (tcuo *ThreadCountUpdateOne) AddReplyCount(i int) *ThreadCountUpdateOne {
	tcuo.mutation.AddReplyCount(i)
	return tcuo
}

// SetLikeCount sets the "like_count" field.
func (tcuo *ThreadCountUpdateOne) SetLikeCount(i int) *ThreadCountUpdateOne {
	tcuo.mutation.ResetLikeCount()
	tcuo.mutation.SetLikeCount(i)
	return tcuo
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (tcuo *ThreadCountUpdateOne) SetNillableLikeCount(i *int) *ThreadCountUpdateOne {
	if i != nil {
		tcuo.SetLikeCount(*i)
	}
	return tcuo
}

// AddLikeCount adds i to the "like_count" field.
func (tcuo *ThreadCountUpdateOne) AddLikeCount(i int) *ThreadCountUpdateOne {
	tcuo.mutation.AddLikeCount(i)
	return tcuo
}

// SetThreadID sets the "thread" edge to the Thread entity by ID.
func (tcuo *ThreadCountUpdateOne) SetThreadID(id int) *ThreadCountUpdateOne {
	tcuo.mutation.SetThreadID(id)
	return tcuo
}

// SetThread sets the "thread" edge to the Thread entity.
func (tcuo *ThreadCountUpdateOne) SetThread(t *Thread) *ThreadCountUpdateOne {
	return tcuo.SetThreadID(t.ID)
}

// Mutation returns the ThreadCountMutation object of the builder.
func (tcuo *ThreadCountUpdateOne) Mutation() *ThreadCountMutation {
	return tcuo.mutation
}

// ClearThread clears the "thread" edge to the Thread entity.
func (tcuo *ThreadCountUpdateOne) ClearThread() *ThreadCountUpdateOne {
	tcuo.mutation.ClearThread()
	return tcuo
}

// Where appends a list predicates to the ThreadCountUpdate builder.
func (tcuo *ThreadCountUpdateOne) Where(ps ...predicate.ThreadCount) *ThreadCountUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *ThreadCountUpdateOne) Select(field string, fields ...string) *ThreadCountUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated ThreadCount entity.
func (tcuo *ThreadCountUpdateOne) Save(ctx context.Context) (*ThreadCount, error) {
	return withHooks(ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *ThreadCountUpdateOne) SaveX(ctx context.Context) *ThreadCount {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *ThreadCountUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *ThreadCountUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcuo *ThreadCountUpdateOne) check() error {
	if _, ok := tcuo.mutation.ThreadID(); tcuo.mutation.ThreadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ThreadCount.thread"`)
	}
	return nil
}

func (tcuo *ThreadCountUpdateOne) sqlSave(ctx context.Context) (_node *ThreadCount, err error) {
	if err := tcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(threadcount.Table, threadcount.Columns, sqlgraph.NewFieldSpec(threadcount.FieldID, field.TypeInt))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ThreadCount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, threadcount.FieldID)
		for _, f := range fields {
			if !threadcount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != threadcount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.ReplyCount(); ok {
		_spec.SetField(threadcount.FieldReplyCount, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.AddedReplyCount(); ok {
		_spec.AddField(threadcount.FieldReplyCount, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.LikeCount(); ok {
		_spec.SetField(threadcount.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.AddedLikeCount(); ok {
		_spec.AddField(threadcount.FieldLikeCount, field.TypeInt, value)
	}
	if tcuo.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcount.ThreadTable,
			Columns: []string{threadcount.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcount.ThreadTable,
			Columns: []string{threadcount.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ThreadCount{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadcount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}
