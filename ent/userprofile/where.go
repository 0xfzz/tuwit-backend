// Code generated by ent, DO NOT EDIT.

package userprofile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/0xfzz/tuwitt/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldID, id))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldDisplayName, v))
}

// Bio applies equality check predicate on the "bio" field. It's identical to BioEQ.
func Bio(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldBio, v))
}

// ProfilePictureID applies equality check predicate on the "profile_picture_id" field. It's identical to ProfilePictureIDEQ.
func ProfilePictureID(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldProfilePictureID, v))
}

// BannerID applies equality check predicate on the "banner_id" field. It's identical to BannerIDEQ.
func BannerID(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldBannerID, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldDisplayName, v))
}

// BioEQ applies the EQ predicate on the "bio" field.
func BioEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldBio, v))
}

// BioNEQ applies the NEQ predicate on the "bio" field.
func BioNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldBio, v))
}

// BioIn applies the In predicate on the "bio" field.
func BioIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldBio, vs...))
}

// BioNotIn applies the NotIn predicate on the "bio" field.
func BioNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldBio, vs...))
}

// BioGT applies the GT predicate on the "bio" field.
func BioGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldBio, v))
}

// BioGTE applies the GTE predicate on the "bio" field.
func BioGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldBio, v))
}

// BioLT applies the LT predicate on the "bio" field.
func BioLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldBio, v))
}

// BioLTE applies the LTE predicate on the "bio" field.
func BioLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldBio, v))
}

// BioContains applies the Contains predicate on the "bio" field.
func BioContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldBio, v))
}

// BioHasPrefix applies the HasPrefix predicate on the "bio" field.
func BioHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldBio, v))
}

// BioHasSuffix applies the HasSuffix predicate on the "bio" field.
func BioHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldBio, v))
}

// BioEqualFold applies the EqualFold predicate on the "bio" field.
func BioEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldBio, v))
}

// BioContainsFold applies the ContainsFold predicate on the "bio" field.
func BioContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldBio, v))
}

// ProfilePictureIDEQ applies the EQ predicate on the "profile_picture_id" field.
func ProfilePictureIDEQ(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldProfilePictureID, v))
}

// ProfilePictureIDNEQ applies the NEQ predicate on the "profile_picture_id" field.
func ProfilePictureIDNEQ(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldProfilePictureID, v))
}

// ProfilePictureIDIn applies the In predicate on the "profile_picture_id" field.
func ProfilePictureIDIn(vs ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldProfilePictureID, vs...))
}

// ProfilePictureIDNotIn applies the NotIn predicate on the "profile_picture_id" field.
func ProfilePictureIDNotIn(vs ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldProfilePictureID, vs...))
}

// ProfilePictureIDIsNil applies the IsNil predicate on the "profile_picture_id" field.
func ProfilePictureIDIsNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIsNull(FieldProfilePictureID))
}

// ProfilePictureIDNotNil applies the NotNil predicate on the "profile_picture_id" field.
func ProfilePictureIDNotNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotNull(FieldProfilePictureID))
}

// BannerIDEQ applies the EQ predicate on the "banner_id" field.
func BannerIDEQ(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldBannerID, v))
}

// BannerIDNEQ applies the NEQ predicate on the "banner_id" field.
func BannerIDNEQ(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldBannerID, v))
}

// BannerIDIn applies the In predicate on the "banner_id" field.
func BannerIDIn(vs ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldBannerID, vs...))
}

// BannerIDNotIn applies the NotIn predicate on the "banner_id" field.
func BannerIDNotIn(vs ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldBannerID, vs...))
}

// BannerIDIsNil applies the IsNil predicate on the "banner_id" field.
func BannerIDIsNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIsNull(FieldBannerID))
}

// BannerIDNotNil applies the NotNil predicate on the "banner_id" field.
func BannerIDNotNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotNull(FieldBannerID))
}

// HasAccount applies the HasEdge predicate on the "account" edge.
func HasAccount() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, AccountTable, AccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountWith applies the HasEdge predicate on the "account" edge with a given conditions (other predicates).
func HasAccountWith(preds ...predicate.UserAccount) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := newAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfilePicture applies the HasEdge predicate on the "profile_picture" edge.
func HasProfilePicture() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProfilePictureTable, ProfilePictureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfilePictureWith applies the HasEdge predicate on the "profile_picture" edge with a given conditions (other predicates).
func HasProfilePictureWith(preds ...predicate.Media) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := newProfilePictureStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBanner applies the HasEdge predicate on the "banner" edge.
func HasBanner() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BannerTable, BannerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBannerWith applies the HasEdge predicate on the "banner" edge with a given conditions (other predicates).
func HasBannerWith(preds ...predicate.Media) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := newBannerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(sql.NotPredicates(p))
}
