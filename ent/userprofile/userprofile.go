// Code generated by ent, DO NOT EDIT.

package userprofile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userprofile type in the database.
	Label = "user_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldBio holds the string denoting the bio field in the database.
	FieldBio = "bio"
	// FieldProfilePictureID holds the string denoting the profile_picture_id field in the database.
	FieldProfilePictureID = "profile_picture_id"
	// FieldBannerID holds the string denoting the banner_id field in the database.
	FieldBannerID = "banner_id"
	// EdgeAccount holds the string denoting the account edge name in mutations.
	EdgeAccount = "account"
	// EdgeProfilePicture holds the string denoting the profile_picture edge name in mutations.
	EdgeProfilePicture = "profile_picture"
	// EdgeBanner holds the string denoting the banner edge name in mutations.
	EdgeBanner = "banner"
	// Table holds the table name of the userprofile in the database.
	Table = "user_profile"
	// AccountTable is the table that holds the account relation/edge.
	AccountTable = "user_profile"
	// AccountInverseTable is the table name for the UserAccount entity.
	// It exists in this package in order to avoid circular dependency with the "useraccount" package.
	AccountInverseTable = "user_account"
	// AccountColumn is the table column denoting the account relation/edge.
	AccountColumn = "user_account_profile"
	// ProfilePictureTable is the table that holds the profile_picture relation/edge.
	ProfilePictureTable = "user_profile"
	// ProfilePictureInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	ProfilePictureInverseTable = "media"
	// ProfilePictureColumn is the table column denoting the profile_picture relation/edge.
	ProfilePictureColumn = "profile_picture_id"
	// BannerTable is the table that holds the banner relation/edge.
	BannerTable = "user_profile"
	// BannerInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	BannerInverseTable = "media"
	// BannerColumn is the table column denoting the banner relation/edge.
	BannerColumn = "banner_id"
)

// Columns holds all SQL columns for userprofile fields.
var Columns = []string{
	FieldID,
	FieldDisplayName,
	FieldBio,
	FieldProfilePictureID,
	FieldBannerID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_profile"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_account_profile",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UserProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByBio orders the results by the bio field.
func ByBio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBio, opts...).ToFunc()
}

// ByProfilePictureID orders the results by the profile_picture_id field.
func ByProfilePictureID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfilePictureID, opts...).ToFunc()
}

// ByBannerID orders the results by the banner_id field.
func ByBannerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBannerID, opts...).ToFunc()
}

// ByAccountField orders the results by account field.
func ByAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByProfilePictureField orders the results by profile_picture field.
func ByProfilePictureField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfilePictureStep(), sql.OrderByField(field, opts...))
	}
}

// ByBannerField orders the results by banner field.
func ByBannerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBannerStep(), sql.OrderByField(field, opts...))
	}
}
func newAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, AccountTable, AccountColumn),
	)
}
func newProfilePictureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfilePictureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProfilePictureTable, ProfilePictureColumn),
	)
}
func newBannerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BannerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BannerTable, BannerColumn),
	)
}
