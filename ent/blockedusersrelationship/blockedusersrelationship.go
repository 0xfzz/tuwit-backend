// Code generated by ent, DO NOT EDIT.

package blockedusersrelationship

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the blockedusersrelationship type in the database.
	Label = "blocked_users_relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldBlockerID holds the string denoting the blocker_id field in the database.
	FieldBlockerID = "blocker_id"
	// EdgeBlocker holds the string denoting the blocker edge name in mutations.
	EdgeBlocker = "blocker"
	// EdgeBlockedUser holds the string denoting the blocked_user edge name in mutations.
	EdgeBlockedUser = "blocked_user"
	// Table holds the table name of the blockedusersrelationship in the database.
	Table = "blocked_users_relationships"
	// BlockerTable is the table that holds the blocker relation/edge.
	BlockerTable = "blocked_users_relationships"
	// BlockerInverseTable is the table name for the UserAccount entity.
	// It exists in this package in order to avoid circular dependency with the "useraccount" package.
	BlockerInverseTable = "user_account"
	// BlockerColumn is the table column denoting the blocker relation/edge.
	BlockerColumn = "blocker_id"
	// BlockedUserTable is the table that holds the blocked_user relation/edge.
	BlockedUserTable = "blocked_users_relationships"
	// BlockedUserInverseTable is the table name for the UserAccount entity.
	// It exists in this package in order to avoid circular dependency with the "useraccount" package.
	BlockedUserInverseTable = "user_account"
	// BlockedUserColumn is the table column denoting the blocked_user relation/edge.
	BlockedUserColumn = "user_id"
)

// Columns holds all SQL columns for blockedusersrelationship fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldBlockerID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the BlockedUsersRelationship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByBlockerID orders the results by the blocker_id field.
func ByBlockerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockerID, opts...).ToFunc()
}

// ByBlockerField orders the results by blocker field.
func ByBlockerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockerStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockedUserField orders the results by blocked_user field.
func ByBlockedUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockedUserStep(), sql.OrderByField(field, opts...))
	}
}
func newBlockerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BlockerTable, BlockerColumn),
	)
}
func newBlockedUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockedUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BlockedUserTable, BlockedUserColumn),
	)
}
