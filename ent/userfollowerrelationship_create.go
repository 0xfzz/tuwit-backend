// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwit-backend/ent/useraccount"
	"github.com/0xfzz/tuwit-backend/ent/userfollowerrelationship"
)

// UserFollowerRelationshipCreate is the builder for creating a UserFollowerRelationship entity.
type UserFollowerRelationshipCreate struct {
	config
	mutation *UserFollowerRelationshipMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ufrc *UserFollowerRelationshipCreate) SetCreatedAt(t time.Time) *UserFollowerRelationshipCreate {
	ufrc.mutation.SetCreatedAt(t)
	return ufrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ufrc *UserFollowerRelationshipCreate) SetNillableCreatedAt(t *time.Time) *UserFollowerRelationshipCreate {
	if t != nil {
		ufrc.SetCreatedAt(*t)
	}
	return ufrc
}

// SetUpdatedAt sets the "updated_at" field.
func (ufrc *UserFollowerRelationshipCreate) SetUpdatedAt(t time.Time) *UserFollowerRelationshipCreate {
	ufrc.mutation.SetUpdatedAt(t)
	return ufrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ufrc *UserFollowerRelationshipCreate) SetNillableUpdatedAt(t *time.Time) *UserFollowerRelationshipCreate {
	if t != nil {
		ufrc.SetUpdatedAt(*t)
	}
	return ufrc
}

// SetUserID sets the "user_id" field.
func (ufrc *UserFollowerRelationshipCreate) SetUserID(i int) *UserFollowerRelationshipCreate {
	ufrc.mutation.SetUserID(i)
	return ufrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ufrc *UserFollowerRelationshipCreate) SetNillableUserID(i *int) *UserFollowerRelationshipCreate {
	if i != nil {
		ufrc.SetUserID(*i)
	}
	return ufrc
}

// SetFollowerID sets the "follower_id" field.
func (ufrc *UserFollowerRelationshipCreate) SetFollowerID(i int) *UserFollowerRelationshipCreate {
	ufrc.mutation.SetFollowerID(i)
	return ufrc
}

// SetNillableFollowerID sets the "follower_id" field if the given value is not nil.
func (ufrc *UserFollowerRelationshipCreate) SetNillableFollowerID(i *int) *UserFollowerRelationshipCreate {
	if i != nil {
		ufrc.SetFollowerID(*i)
	}
	return ufrc
}

// SetFollower sets the "follower" edge to the UserAccount entity.
func (ufrc *UserFollowerRelationshipCreate) SetFollower(u *UserAccount) *UserFollowerRelationshipCreate {
	return ufrc.SetFollowerID(u.ID)
}

// SetFollowingID sets the "following" edge to the UserAccount entity by ID.
func (ufrc *UserFollowerRelationshipCreate) SetFollowingID(id int) *UserFollowerRelationshipCreate {
	ufrc.mutation.SetFollowingID(id)
	return ufrc
}

// SetNillableFollowingID sets the "following" edge to the UserAccount entity by ID if the given value is not nil.
func (ufrc *UserFollowerRelationshipCreate) SetNillableFollowingID(id *int) *UserFollowerRelationshipCreate {
	if id != nil {
		ufrc = ufrc.SetFollowingID(*id)
	}
	return ufrc
}

// SetFollowing sets the "following" edge to the UserAccount entity.
func (ufrc *UserFollowerRelationshipCreate) SetFollowing(u *UserAccount) *UserFollowerRelationshipCreate {
	return ufrc.SetFollowingID(u.ID)
}

// Mutation returns the UserFollowerRelationshipMutation object of the builder.
func (ufrc *UserFollowerRelationshipCreate) Mutation() *UserFollowerRelationshipMutation {
	return ufrc.mutation
}

// Save creates the UserFollowerRelationship in the database.
func (ufrc *UserFollowerRelationshipCreate) Save(ctx context.Context) (*UserFollowerRelationship, error) {
	ufrc.defaults()
	return withHooks(ctx, ufrc.sqlSave, ufrc.mutation, ufrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ufrc *UserFollowerRelationshipCreate) SaveX(ctx context.Context) *UserFollowerRelationship {
	v, err := ufrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufrc *UserFollowerRelationshipCreate) Exec(ctx context.Context) error {
	_, err := ufrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufrc *UserFollowerRelationshipCreate) ExecX(ctx context.Context) {
	if err := ufrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufrc *UserFollowerRelationshipCreate) defaults() {
	if _, ok := ufrc.mutation.CreatedAt(); !ok {
		v := userfollowerrelationship.DefaultCreatedAt()
		ufrc.mutation.SetCreatedAt(v)
	}
	if _, ok := ufrc.mutation.UpdatedAt(); !ok {
		v := userfollowerrelationship.DefaultUpdatedAt()
		ufrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufrc *UserFollowerRelationshipCreate) check() error {
	if _, ok := ufrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserFollowerRelationship.created_at"`)}
	}
	if _, ok := ufrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserFollowerRelationship.updated_at"`)}
	}
	return nil
}

func (ufrc *UserFollowerRelationshipCreate) sqlSave(ctx context.Context) (*UserFollowerRelationship, error) {
	if err := ufrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ufrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ufrc.mutation.id = &_node.ID
	ufrc.mutation.done = true
	return _node, nil
}

func (ufrc *UserFollowerRelationshipCreate) createSpec() (*UserFollowerRelationship, *sqlgraph.CreateSpec) {
	var (
		_node = &UserFollowerRelationship{config: ufrc.config}
		_spec = sqlgraph.NewCreateSpec(userfollowerrelationship.Table, sqlgraph.NewFieldSpec(userfollowerrelationship.FieldID, field.TypeInt))
	)
	if value, ok := ufrc.mutation.CreatedAt(); ok {
		_spec.SetField(userfollowerrelationship.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ufrc.mutation.UpdatedAt(); ok {
		_spec.SetField(userfollowerrelationship.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ufrc.mutation.FollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowerrelationship.FollowerTable,
			Columns: []string{userfollowerrelationship.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FollowerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ufrc.mutation.FollowingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowerrelationship.FollowingTable,
			Columns: []string{userfollowerrelationship.FollowingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserFollowerRelationshipCreateBulk is the builder for creating many UserFollowerRelationship entities in bulk.
type UserFollowerRelationshipCreateBulk struct {
	config
	err      error
	builders []*UserFollowerRelationshipCreate
}

// Save creates the UserFollowerRelationship entities in the database.
func (ufrcb *UserFollowerRelationshipCreateBulk) Save(ctx context.Context) ([]*UserFollowerRelationship, error) {
	if ufrcb.err != nil {
		return nil, ufrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ufrcb.builders))
	nodes := make([]*UserFollowerRelationship, len(ufrcb.builders))
	mutators := make([]Mutator, len(ufrcb.builders))
	for i := range ufrcb.builders {
		func(i int, root context.Context) {
			builder := ufrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserFollowerRelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufrcb *UserFollowerRelationshipCreateBulk) SaveX(ctx context.Context) []*UserFollowerRelationship {
	v, err := ufrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufrcb *UserFollowerRelationshipCreateBulk) Exec(ctx context.Context) error {
	_, err := ufrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufrcb *UserFollowerRelationshipCreateBulk) ExecX(ctx context.Context) {
	if err := ufrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
