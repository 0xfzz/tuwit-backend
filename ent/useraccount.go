// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/0xfzz/tuwitt/ent/useraccount"
	"github.com/0xfzz/tuwitt/ent/usercount"
	"github.com/0xfzz/tuwitt/ent/userprofile"
)

// UserAccount is the model entity for the UserAccount schema.
type UserAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// IsVerified holds the value of the "is_verified" field.
	IsVerified bool `json:"is_verified,omitempty"`
	// IsPrivate holds the value of the "is_private" field.
	IsPrivate bool `json:"is_private,omitempty"`
	// IsEmailVerified holds the value of the "is_email_verified" field.
	IsEmailVerified bool `json:"is_email_verified,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserAccountQuery when eager-loading is set.
	Edges        UserAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserAccountEdges holds the relations/edges for other nodes in the graph.
type UserAccountEdges struct {
	// Profile holds the value of the profile edge.
	Profile *UserProfile `json:"profile,omitempty"`
	// Followers holds the value of the followers edge.
	Followers []*UserFollowerRelationship `json:"followers,omitempty"`
	// Followings holds the value of the followings edge.
	Followings []*UserFollowerRelationship `json:"followings,omitempty"`
	// BlockedBy holds the value of the blocked_by edge.
	BlockedBy []*BlockedUsersRelationship `json:"blocked_by,omitempty"`
	// BlockedUsers holds the value of the blocked_users edge.
	BlockedUsers []*BlockedUsersRelationship `json:"blocked_users,omitempty"`
	// UserCount holds the value of the user_count edge.
	UserCount *UserCount `json:"user_count,omitempty"`
	// Threads holds the value of the threads edge.
	Threads []*Thread `json:"threads,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAccountEdges) ProfileOrErr() (*UserProfile, error) {
	if e.loadedTypes[0] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: userprofile.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// FollowersOrErr returns the Followers value or an error if the edge
// was not loaded in eager-loading.
func (e UserAccountEdges) FollowersOrErr() ([]*UserFollowerRelationship, error) {
	if e.loadedTypes[1] {
		return e.Followers, nil
	}
	return nil, &NotLoadedError{edge: "followers"}
}

// FollowingsOrErr returns the Followings value or an error if the edge
// was not loaded in eager-loading.
func (e UserAccountEdges) FollowingsOrErr() ([]*UserFollowerRelationship, error) {
	if e.loadedTypes[2] {
		return e.Followings, nil
	}
	return nil, &NotLoadedError{edge: "followings"}
}

// BlockedByOrErr returns the BlockedBy value or an error if the edge
// was not loaded in eager-loading.
func (e UserAccountEdges) BlockedByOrErr() ([]*BlockedUsersRelationship, error) {
	if e.loadedTypes[3] {
		return e.BlockedBy, nil
	}
	return nil, &NotLoadedError{edge: "blocked_by"}
}

// BlockedUsersOrErr returns the BlockedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e UserAccountEdges) BlockedUsersOrErr() ([]*BlockedUsersRelationship, error) {
	if e.loadedTypes[4] {
		return e.BlockedUsers, nil
	}
	return nil, &NotLoadedError{edge: "blocked_users"}
}

// UserCountOrErr returns the UserCount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAccountEdges) UserCountOrErr() (*UserCount, error) {
	if e.loadedTypes[5] {
		if e.UserCount == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: usercount.Label}
		}
		return e.UserCount, nil
	}
	return nil, &NotLoadedError{edge: "user_count"}
}

// ThreadsOrErr returns the Threads value or an error if the edge
// was not loaded in eager-loading.
func (e UserAccountEdges) ThreadsOrErr() ([]*Thread, error) {
	if e.loadedTypes[6] {
		return e.Threads, nil
	}
	return nil, &NotLoadedError{edge: "threads"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case useraccount.FieldIsVerified, useraccount.FieldIsPrivate, useraccount.FieldIsEmailVerified:
			values[i] = new(sql.NullBool)
		case useraccount.FieldID:
			values[i] = new(sql.NullInt64)
		case useraccount.FieldEmail, useraccount.FieldUsername, useraccount.FieldPassword:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAccount fields.
func (ua *UserAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useraccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ua.ID = int(value.Int64)
		case useraccount.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ua.Email = value.String
			}
		case useraccount.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				ua.Username = value.String
			}
		case useraccount.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				ua.Password = value.String
			}
		case useraccount.FieldIsVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_verified", values[i])
			} else if value.Valid {
				ua.IsVerified = value.Bool
			}
		case useraccount.FieldIsPrivate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_private", values[i])
			} else if value.Valid {
				ua.IsPrivate = value.Bool
			}
		case useraccount.FieldIsEmailVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_email_verified", values[i])
			} else if value.Valid {
				ua.IsEmailVerified = value.Bool
			}
		default:
			ua.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserAccount.
// This includes values selected through modifiers, order, etc.
func (ua *UserAccount) Value(name string) (ent.Value, error) {
	return ua.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the UserAccount entity.
func (ua *UserAccount) QueryProfile() *UserProfileQuery {
	return NewUserAccountClient(ua.config).QueryProfile(ua)
}

// QueryFollowers queries the "followers" edge of the UserAccount entity.
func (ua *UserAccount) QueryFollowers() *UserFollowerRelationshipQuery {
	return NewUserAccountClient(ua.config).QueryFollowers(ua)
}

// QueryFollowings queries the "followings" edge of the UserAccount entity.
func (ua *UserAccount) QueryFollowings() *UserFollowerRelationshipQuery {
	return NewUserAccountClient(ua.config).QueryFollowings(ua)
}

// QueryBlockedBy queries the "blocked_by" edge of the UserAccount entity.
func (ua *UserAccount) QueryBlockedBy() *BlockedUsersRelationshipQuery {
	return NewUserAccountClient(ua.config).QueryBlockedBy(ua)
}

// QueryBlockedUsers queries the "blocked_users" edge of the UserAccount entity.
func (ua *UserAccount) QueryBlockedUsers() *BlockedUsersRelationshipQuery {
	return NewUserAccountClient(ua.config).QueryBlockedUsers(ua)
}

// QueryUserCount queries the "user_count" edge of the UserAccount entity.
func (ua *UserAccount) QueryUserCount() *UserCountQuery {
	return NewUserAccountClient(ua.config).QueryUserCount(ua)
}

// QueryThreads queries the "threads" edge of the UserAccount entity.
func (ua *UserAccount) QueryThreads() *ThreadQuery {
	return NewUserAccountClient(ua.config).QueryThreads(ua)
}

// Update returns a builder for updating this UserAccount.
// Note that you need to call UserAccount.Unwrap() before calling this method if this UserAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ua *UserAccount) Update() *UserAccountUpdateOne {
	return NewUserAccountClient(ua.config).UpdateOne(ua)
}

// Unwrap unwraps the UserAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ua *UserAccount) Unwrap() *UserAccount {
	_tx, ok := ua.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAccount is not a transactional entity")
	}
	ua.config.driver = _tx.drv
	return ua
}

// String implements the fmt.Stringer.
func (ua *UserAccount) String() string {
	var builder strings.Builder
	builder.WriteString("UserAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ua.ID))
	builder.WriteString("email=")
	builder.WriteString(ua.Email)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(ua.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(ua.Password)
	builder.WriteString(", ")
	builder.WriteString("is_verified=")
	builder.WriteString(fmt.Sprintf("%v", ua.IsVerified))
	builder.WriteString(", ")
	builder.WriteString("is_private=")
	builder.WriteString(fmt.Sprintf("%v", ua.IsPrivate))
	builder.WriteString(", ")
	builder.WriteString("is_email_verified=")
	builder.WriteString(fmt.Sprintf("%v", ua.IsEmailVerified))
	builder.WriteByte(')')
	return builder.String()
}

// UserAccounts is a parsable slice of UserAccount.
type UserAccounts []*UserAccount
