// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0xfzz/tuwitt/ent/blockedusersrelationship"
	"github.com/0xfzz/tuwitt/ent/useraccount"
)

// BlockedUsersRelationshipCreate is the builder for creating a BlockedUsersRelationship entity.
type BlockedUsersRelationshipCreate struct {
	config
	mutation *BlockedUsersRelationshipMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (burc *BlockedUsersRelationshipCreate) SetCreatedAt(t time.Time) *BlockedUsersRelationshipCreate {
	burc.mutation.SetCreatedAt(t)
	return burc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (burc *BlockedUsersRelationshipCreate) SetNillableCreatedAt(t *time.Time) *BlockedUsersRelationshipCreate {
	if t != nil {
		burc.SetCreatedAt(*t)
	}
	return burc
}

// SetUpdatedAt sets the "updated_at" field.
func (burc *BlockedUsersRelationshipCreate) SetUpdatedAt(t time.Time) *BlockedUsersRelationshipCreate {
	burc.mutation.SetUpdatedAt(t)
	return burc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (burc *BlockedUsersRelationshipCreate) SetNillableUpdatedAt(t *time.Time) *BlockedUsersRelationshipCreate {
	if t != nil {
		burc.SetUpdatedAt(*t)
	}
	return burc
}

// SetUserID sets the "user_id" field.
func (burc *BlockedUsersRelationshipCreate) SetUserID(i int) *BlockedUsersRelationshipCreate {
	burc.mutation.SetUserID(i)
	return burc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (burc *BlockedUsersRelationshipCreate) SetNillableUserID(i *int) *BlockedUsersRelationshipCreate {
	if i != nil {
		burc.SetUserID(*i)
	}
	return burc
}

// SetBlockerID sets the "blocker_id" field.
func (burc *BlockedUsersRelationshipCreate) SetBlockerID(i int) *BlockedUsersRelationshipCreate {
	burc.mutation.SetBlockerID(i)
	return burc
}

// SetNillableBlockerID sets the "blocker_id" field if the given value is not nil.
func (burc *BlockedUsersRelationshipCreate) SetNillableBlockerID(i *int) *BlockedUsersRelationshipCreate {
	if i != nil {
		burc.SetBlockerID(*i)
	}
	return burc
}

// SetBlocker sets the "blocker" edge to the UserAccount entity.
func (burc *BlockedUsersRelationshipCreate) SetBlocker(u *UserAccount) *BlockedUsersRelationshipCreate {
	return burc.SetBlockerID(u.ID)
}

// SetBlockedUserID sets the "blocked_user" edge to the UserAccount entity by ID.
func (burc *BlockedUsersRelationshipCreate) SetBlockedUserID(id int) *BlockedUsersRelationshipCreate {
	burc.mutation.SetBlockedUserID(id)
	return burc
}

// SetNillableBlockedUserID sets the "blocked_user" edge to the UserAccount entity by ID if the given value is not nil.
func (burc *BlockedUsersRelationshipCreate) SetNillableBlockedUserID(id *int) *BlockedUsersRelationshipCreate {
	if id != nil {
		burc = burc.SetBlockedUserID(*id)
	}
	return burc
}

// SetBlockedUser sets the "blocked_user" edge to the UserAccount entity.
func (burc *BlockedUsersRelationshipCreate) SetBlockedUser(u *UserAccount) *BlockedUsersRelationshipCreate {
	return burc.SetBlockedUserID(u.ID)
}

// Mutation returns the BlockedUsersRelationshipMutation object of the builder.
func (burc *BlockedUsersRelationshipCreate) Mutation() *BlockedUsersRelationshipMutation {
	return burc.mutation
}

// Save creates the BlockedUsersRelationship in the database.
func (burc *BlockedUsersRelationshipCreate) Save(ctx context.Context) (*BlockedUsersRelationship, error) {
	burc.defaults()
	return withHooks(ctx, burc.sqlSave, burc.mutation, burc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (burc *BlockedUsersRelationshipCreate) SaveX(ctx context.Context) *BlockedUsersRelationship {
	v, err := burc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (burc *BlockedUsersRelationshipCreate) Exec(ctx context.Context) error {
	_, err := burc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (burc *BlockedUsersRelationshipCreate) ExecX(ctx context.Context) {
	if err := burc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (burc *BlockedUsersRelationshipCreate) defaults() {
	if _, ok := burc.mutation.CreatedAt(); !ok {
		v := blockedusersrelationship.DefaultCreatedAt()
		burc.mutation.SetCreatedAt(v)
	}
	if _, ok := burc.mutation.UpdatedAt(); !ok {
		v := blockedusersrelationship.DefaultUpdatedAt()
		burc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (burc *BlockedUsersRelationshipCreate) check() error {
	if _, ok := burc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockedUsersRelationship.created_at"`)}
	}
	if _, ok := burc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockedUsersRelationship.updated_at"`)}
	}
	return nil
}

func (burc *BlockedUsersRelationshipCreate) sqlSave(ctx context.Context) (*BlockedUsersRelationship, error) {
	if err := burc.check(); err != nil {
		return nil, err
	}
	_node, _spec := burc.createSpec()
	if err := sqlgraph.CreateNode(ctx, burc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	burc.mutation.id = &_node.ID
	burc.mutation.done = true
	return _node, nil
}

func (burc *BlockedUsersRelationshipCreate) createSpec() (*BlockedUsersRelationship, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockedUsersRelationship{config: burc.config}
		_spec = sqlgraph.NewCreateSpec(blockedusersrelationship.Table, sqlgraph.NewFieldSpec(blockedusersrelationship.FieldID, field.TypeInt))
	)
	if value, ok := burc.mutation.CreatedAt(); ok {
		_spec.SetField(blockedusersrelationship.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := burc.mutation.UpdatedAt(); ok {
		_spec.SetField(blockedusersrelationship.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := burc.mutation.BlockerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockedusersrelationship.BlockerTable,
			Columns: []string{blockedusersrelationship.BlockerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BlockerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := burc.mutation.BlockedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockedusersrelationship.BlockedUserTable,
			Columns: []string{blockedusersrelationship.BlockedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlockedUsersRelationshipCreateBulk is the builder for creating many BlockedUsersRelationship entities in bulk.
type BlockedUsersRelationshipCreateBulk struct {
	config
	err      error
	builders []*BlockedUsersRelationshipCreate
}

// Save creates the BlockedUsersRelationship entities in the database.
func (burcb *BlockedUsersRelationshipCreateBulk) Save(ctx context.Context) ([]*BlockedUsersRelationship, error) {
	if burcb.err != nil {
		return nil, burcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(burcb.builders))
	nodes := make([]*BlockedUsersRelationship, len(burcb.builders))
	mutators := make([]Mutator, len(burcb.builders))
	for i := range burcb.builders {
		func(i int, root context.Context) {
			builder := burcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockedUsersRelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, burcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, burcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, burcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (burcb *BlockedUsersRelationshipCreateBulk) SaveX(ctx context.Context) []*BlockedUsersRelationship {
	v, err := burcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (burcb *BlockedUsersRelationshipCreateBulk) Exec(ctx context.Context) error {
	_, err := burcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (burcb *BlockedUsersRelationshipCreateBulk) ExecX(ctx context.Context) {
	if err := burcb.Exec(ctx); err != nil {
		panic(err)
	}
}
